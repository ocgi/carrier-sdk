// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2eproto;
namespace carrier {
namespace dev {
namespace sdk {
class BoolValue;
class BoolValueDefaultTypeInternal;
extern BoolValueDefaultTypeInternal _BoolValue_default_instance_;
class Duration;
class DurationDefaultTypeInternal;
extern DurationDefaultTypeInternal _Duration_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class GameServer;
class GameServerDefaultTypeInternal;
extern GameServerDefaultTypeInternal _GameServer_default_instance_;
class GameServer_ObjectMeta;
class GameServer_ObjectMetaDefaultTypeInternal;
extern GameServer_ObjectMetaDefaultTypeInternal _GameServer_ObjectMeta_default_instance_;
class GameServer_ObjectMeta_AnnotationsEntry_DoNotUse;
class GameServer_ObjectMeta_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern GameServer_ObjectMeta_AnnotationsEntry_DoNotUseDefaultTypeInternal _GameServer_ObjectMeta_AnnotationsEntry_DoNotUse_default_instance_;
class GameServer_ObjectMeta_LabelsEntry_DoNotUse;
class GameServer_ObjectMeta_LabelsEntry_DoNotUseDefaultTypeInternal;
extern GameServer_ObjectMeta_LabelsEntry_DoNotUseDefaultTypeInternal _GameServer_ObjectMeta_LabelsEntry_DoNotUse_default_instance_;
class GameServer_Spec;
class GameServer_SpecDefaultTypeInternal;
extern GameServer_SpecDefaultTypeInternal _GameServer_Spec_default_instance_;
class GameServer_Spec_Constraint;
class GameServer_Spec_ConstraintDefaultTypeInternal;
extern GameServer_Spec_ConstraintDefaultTypeInternal _GameServer_Spec_Constraint_default_instance_;
class GameServer_Status;
class GameServer_StatusDefaultTypeInternal;
extern GameServer_StatusDefaultTypeInternal _GameServer_Status_default_instance_;
class GameServer_Status_GameServerCondition;
class GameServer_Status_GameServerConditionDefaultTypeInternal;
extern GameServer_Status_GameServerConditionDefaultTypeInternal _GameServer_Status_GameServerCondition_default_instance_;
class GameServer_Status_LoadBalancerStatus;
class GameServer_Status_LoadBalancerStatusDefaultTypeInternal;
extern GameServer_Status_LoadBalancerStatusDefaultTypeInternal _GameServer_Status_LoadBalancerStatus_default_instance_;
class GameServer_Status_LoadBalancerStatus_LoadBalancerIngress;
class GameServer_Status_LoadBalancerStatus_LoadBalancerIngressDefaultTypeInternal;
extern GameServer_Status_LoadBalancerStatus_LoadBalancerIngressDefaultTypeInternal _GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_default_instance_;
class GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort;
class GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPortDefaultTypeInternal;
extern GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPortDefaultTypeInternal _GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_default_instance_;
class GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange;
class GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRangeDefaultTypeInternal;
extern GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRangeDefaultTypeInternal _GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange_default_instance_;
class KeyValue;
class KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
}  // namespace sdk
}  // namespace dev
}  // namespace carrier
PROTOBUF_NAMESPACE_OPEN
template<> ::carrier::dev::sdk::BoolValue* Arena::CreateMaybeMessage<::carrier::dev::sdk::BoolValue>(Arena*);
template<> ::carrier::dev::sdk::Duration* Arena::CreateMaybeMessage<::carrier::dev::sdk::Duration>(Arena*);
template<> ::carrier::dev::sdk::Empty* Arena::CreateMaybeMessage<::carrier::dev::sdk::Empty>(Arena*);
template<> ::carrier::dev::sdk::GameServer* Arena::CreateMaybeMessage<::carrier::dev::sdk::GameServer>(Arena*);
template<> ::carrier::dev::sdk::GameServer_ObjectMeta* Arena::CreateMaybeMessage<::carrier::dev::sdk::GameServer_ObjectMeta>(Arena*);
template<> ::carrier::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage<::carrier::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse>(Arena*);
template<> ::carrier::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::carrier::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse>(Arena*);
template<> ::carrier::dev::sdk::GameServer_Spec* Arena::CreateMaybeMessage<::carrier::dev::sdk::GameServer_Spec>(Arena*);
template<> ::carrier::dev::sdk::GameServer_Spec_Constraint* Arena::CreateMaybeMessage<::carrier::dev::sdk::GameServer_Spec_Constraint>(Arena*);
template<> ::carrier::dev::sdk::GameServer_Status* Arena::CreateMaybeMessage<::carrier::dev::sdk::GameServer_Status>(Arena*);
template<> ::carrier::dev::sdk::GameServer_Status_GameServerCondition* Arena::CreateMaybeMessage<::carrier::dev::sdk::GameServer_Status_GameServerCondition>(Arena*);
template<> ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus* Arena::CreateMaybeMessage<::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus>(Arena*);
template<> ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress* Arena::CreateMaybeMessage<::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress>(Arena*);
template<> ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* Arena::CreateMaybeMessage<::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort>(Arena*);
template<> ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* Arena::CreateMaybeMessage<::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange>(Arena*);
template<> ::carrier::dev::sdk::KeyValue* Arena::CreateMaybeMessage<::carrier::dev::sdk::KeyValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace carrier {
namespace dev {
namespace sdk {

// ===================================================================

class Empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carrier.dev.sdk.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "carrier.dev.sdk.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:carrier.dev.sdk.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class BoolValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carrier.dev.sdk.BoolValue) */ {
 public:
  inline BoolValue() : BoolValue(nullptr) {}
  virtual ~BoolValue();

  BoolValue(const BoolValue& from);
  BoolValue(BoolValue&& from) noexcept
    : BoolValue() {
    *this = ::std::move(from);
  }

  inline BoolValue& operator=(const BoolValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolValue& operator=(BoolValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoolValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoolValue* internal_default_instance() {
    return reinterpret_cast<const BoolValue*>(
               &_BoolValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BoolValue& a, BoolValue& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoolValue* New() const final {
    return CreateMaybeMessage<BoolValue>(nullptr);
  }

  BoolValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoolValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoolValue& from);
  void MergeFrom(const BoolValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "carrier.dev.sdk.BoolValue";
  }
  protected:
  explicit BoolValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:carrier.dev.sdk.BoolValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class KeyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carrier.dev.sdk.KeyValue) */ {
 public:
  inline KeyValue() : KeyValue(nullptr) {}
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const final {
    return CreateMaybeMessage<KeyValue>(nullptr);
  }

  KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "carrier.dev.sdk.KeyValue";
  }
  protected:
  explicit KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:carrier.dev.sdk.KeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class Duration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carrier.dev.sdk.Duration) */ {
 public:
  inline Duration() : Duration(nullptr) {}
  virtual ~Duration();

  Duration(const Duration& from);
  Duration(Duration&& from) noexcept
    : Duration() {
    *this = ::std::move(from);
  }

  inline Duration& operator=(const Duration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Duration& operator=(Duration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Duration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Duration* internal_default_instance() {
    return reinterpret_cast<const Duration*>(
               &_Duration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Duration& a, Duration& b) {
    a.Swap(&b);
  }
  inline void Swap(Duration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Duration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Duration* New() const final {
    return CreateMaybeMessage<Duration>(nullptr);
  }

  Duration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Duration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Duration& from);
  void MergeFrom(const Duration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Duration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "carrier.dev.sdk.Duration";
  }
  protected:
  explicit Duration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
  };
  // int64 seconds = 1;
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:carrier.dev.sdk.Duration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 seconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class GameServer_ObjectMeta_AnnotationsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GameServer_ObjectMeta_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GameServer_ObjectMeta_AnnotationsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GameServer_ObjectMeta_AnnotationsEntry_DoNotUse();
  explicit GameServer_ObjectMeta_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GameServer_ObjectMeta_AnnotationsEntry_DoNotUse& other);
  static const GameServer_ObjectMeta_AnnotationsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GameServer_ObjectMeta_AnnotationsEntry_DoNotUse*>(&_GameServer_ObjectMeta_AnnotationsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "carrier.dev.sdk.GameServer.ObjectMeta.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "carrier.dev.sdk.GameServer.ObjectMeta.AnnotationsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class GameServer_ObjectMeta_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GameServer_ObjectMeta_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GameServer_ObjectMeta_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GameServer_ObjectMeta_LabelsEntry_DoNotUse();
  explicit GameServer_ObjectMeta_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GameServer_ObjectMeta_LabelsEntry_DoNotUse& other);
  static const GameServer_ObjectMeta_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GameServer_ObjectMeta_LabelsEntry_DoNotUse*>(&_GameServer_ObjectMeta_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "carrier.dev.sdk.GameServer.ObjectMeta.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "carrier.dev.sdk.GameServer.ObjectMeta.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class GameServer_ObjectMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carrier.dev.sdk.GameServer.ObjectMeta) */ {
 public:
  inline GameServer_ObjectMeta() : GameServer_ObjectMeta(nullptr) {}
  virtual ~GameServer_ObjectMeta();

  GameServer_ObjectMeta(const GameServer_ObjectMeta& from);
  GameServer_ObjectMeta(GameServer_ObjectMeta&& from) noexcept
    : GameServer_ObjectMeta() {
    *this = ::std::move(from);
  }

  inline GameServer_ObjectMeta& operator=(const GameServer_ObjectMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServer_ObjectMeta& operator=(GameServer_ObjectMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameServer_ObjectMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameServer_ObjectMeta* internal_default_instance() {
    return reinterpret_cast<const GameServer_ObjectMeta*>(
               &_GameServer_ObjectMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GameServer_ObjectMeta& a, GameServer_ObjectMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServer_ObjectMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServer_ObjectMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServer_ObjectMeta* New() const final {
    return CreateMaybeMessage<GameServer_ObjectMeta>(nullptr);
  }

  GameServer_ObjectMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServer_ObjectMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServer_ObjectMeta& from);
  void MergeFrom(const GameServer_ObjectMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServer_ObjectMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "carrier.dev.sdk.GameServer.ObjectMeta";
  }
  protected:
  explicit GameServer_ObjectMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationsFieldNumber = 8,
    kLabelsFieldNumber = 9,
    kNameFieldNumber = 1,
    kNamespaceFieldNumber = 2,
    kUidFieldNumber = 3,
    kResourceVersionFieldNumber = 4,
    kGenerationFieldNumber = 5,
    kCreationTimestampFieldNumber = 6,
    kDeletionTimestampFieldNumber = 7,
  };
  // map<string, string> annotations = 8;
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;
  public:
  void clear_annotations();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_annotations();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      annotations() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_annotations();

  // map<string, string> labels = 9;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string namespace = 2;
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string uid = 3;
  void clear_uid();
  const std::string& uid() const;
  void set_uid(const std::string& value);
  void set_uid(std::string&& value);
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  std::string* mutable_uid();
  std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string resource_version = 4;
  void clear_resource_version();
  const std::string& resource_version() const;
  void set_resource_version(const std::string& value);
  void set_resource_version(std::string&& value);
  void set_resource_version(const char* value);
  void set_resource_version(const char* value, size_t size);
  std::string* mutable_resource_version();
  std::string* release_resource_version();
  void set_allocated_resource_version(std::string* resource_version);
  private:
  const std::string& _internal_resource_version() const;
  void _internal_set_resource_version(const std::string& value);
  std::string* _internal_mutable_resource_version();
  public:

  // int64 generation = 5;
  void clear_generation();
  ::PROTOBUF_NAMESPACE_ID::int64 generation() const;
  void set_generation(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_generation() const;
  void _internal_set_generation(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 creation_timestamp = 6;
  void clear_creation_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 creation_timestamp() const;
  void set_creation_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_creation_timestamp() const;
  void _internal_set_creation_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 deletion_timestamp = 7;
  void clear_deletion_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 deletion_timestamp() const;
  void set_deletion_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deletion_timestamp() const;
  void _internal_set_deletion_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:carrier.dev.sdk.GameServer.ObjectMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GameServer_ObjectMeta_AnnotationsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > annotations_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GameServer_ObjectMeta_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_version_;
  ::PROTOBUF_NAMESPACE_ID::int64 generation_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 deletion_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class GameServer_Spec_Constraint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carrier.dev.sdk.GameServer.Spec.Constraint) */ {
 public:
  inline GameServer_Spec_Constraint() : GameServer_Spec_Constraint(nullptr) {}
  virtual ~GameServer_Spec_Constraint();

  GameServer_Spec_Constraint(const GameServer_Spec_Constraint& from);
  GameServer_Spec_Constraint(GameServer_Spec_Constraint&& from) noexcept
    : GameServer_Spec_Constraint() {
    *this = ::std::move(from);
  }

  inline GameServer_Spec_Constraint& operator=(const GameServer_Spec_Constraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServer_Spec_Constraint& operator=(GameServer_Spec_Constraint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameServer_Spec_Constraint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameServer_Spec_Constraint* internal_default_instance() {
    return reinterpret_cast<const GameServer_Spec_Constraint*>(
               &_GameServer_Spec_Constraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GameServer_Spec_Constraint& a, GameServer_Spec_Constraint& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServer_Spec_Constraint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServer_Spec_Constraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServer_Spec_Constraint* New() const final {
    return CreateMaybeMessage<GameServer_Spec_Constraint>(nullptr);
  }

  GameServer_Spec_Constraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServer_Spec_Constraint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServer_Spec_Constraint& from);
  void MergeFrom(const GameServer_Spec_Constraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServer_Spec_Constraint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "carrier.dev.sdk.GameServer.Spec.Constraint";
  }
  protected:
  explicit GameServer_Spec_Constraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kMessageFieldNumber = 3,
    kTimeAddedFieldNumber = 4,
    kEffectiveFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 timeAdded = 4;
  void clear_timeadded();
  ::PROTOBUF_NAMESPACE_ID::int64 timeadded() const;
  void set_timeadded(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timeadded() const;
  void _internal_set_timeadded(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool effective = 2;
  void clear_effective();
  bool effective() const;
  void set_effective(bool value);
  private:
  bool _internal_effective() const;
  void _internal_set_effective(bool value);
  public:

  // @@protoc_insertion_point(class_scope:carrier.dev.sdk.GameServer.Spec.Constraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 timeadded_;
  bool effective_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class GameServer_Spec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carrier.dev.sdk.GameServer.Spec) */ {
 public:
  inline GameServer_Spec() : GameServer_Spec(nullptr) {}
  virtual ~GameServer_Spec();

  GameServer_Spec(const GameServer_Spec& from);
  GameServer_Spec(GameServer_Spec&& from) noexcept
    : GameServer_Spec() {
    *this = ::std::move(from);
  }

  inline GameServer_Spec& operator=(const GameServer_Spec& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServer_Spec& operator=(GameServer_Spec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameServer_Spec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameServer_Spec* internal_default_instance() {
    return reinterpret_cast<const GameServer_Spec*>(
               &_GameServer_Spec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GameServer_Spec& a, GameServer_Spec& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServer_Spec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServer_Spec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServer_Spec* New() const final {
    return CreateMaybeMessage<GameServer_Spec>(nullptr);
  }

  GameServer_Spec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServer_Spec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServer_Spec& from);
  void MergeFrom(const GameServer_Spec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServer_Spec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "carrier.dev.sdk.GameServer.Spec";
  }
  protected:
  explicit GameServer_Spec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GameServer_Spec_Constraint Constraint;

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintsFieldNumber = 1,
    kReadinessGatesFieldNumber = 2,
    kDeletableGatesFieldNumber = 3,
  };
  // repeated .carrier.dev.sdk.GameServer.Spec.Constraint constraints = 1;
  int constraints_size() const;
  private:
  int _internal_constraints_size() const;
  public:
  void clear_constraints();
  ::carrier::dev::sdk::GameServer_Spec_Constraint* mutable_constraints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Spec_Constraint >*
      mutable_constraints();
  private:
  const ::carrier::dev::sdk::GameServer_Spec_Constraint& _internal_constraints(int index) const;
  ::carrier::dev::sdk::GameServer_Spec_Constraint* _internal_add_constraints();
  public:
  const ::carrier::dev::sdk::GameServer_Spec_Constraint& constraints(int index) const;
  ::carrier::dev::sdk::GameServer_Spec_Constraint* add_constraints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Spec_Constraint >&
      constraints() const;

  // repeated string readiness_gates = 2;
  int readiness_gates_size() const;
  private:
  int _internal_readiness_gates_size() const;
  public:
  void clear_readiness_gates();
  const std::string& readiness_gates(int index) const;
  std::string* mutable_readiness_gates(int index);
  void set_readiness_gates(int index, const std::string& value);
  void set_readiness_gates(int index, std::string&& value);
  void set_readiness_gates(int index, const char* value);
  void set_readiness_gates(int index, const char* value, size_t size);
  std::string* add_readiness_gates();
  void add_readiness_gates(const std::string& value);
  void add_readiness_gates(std::string&& value);
  void add_readiness_gates(const char* value);
  void add_readiness_gates(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& readiness_gates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_readiness_gates();
  private:
  const std::string& _internal_readiness_gates(int index) const;
  std::string* _internal_add_readiness_gates();
  public:

  // repeated string deletable_gates = 3;
  int deletable_gates_size() const;
  private:
  int _internal_deletable_gates_size() const;
  public:
  void clear_deletable_gates();
  const std::string& deletable_gates(int index) const;
  std::string* mutable_deletable_gates(int index);
  void set_deletable_gates(int index, const std::string& value);
  void set_deletable_gates(int index, std::string&& value);
  void set_deletable_gates(int index, const char* value);
  void set_deletable_gates(int index, const char* value, size_t size);
  std::string* add_deletable_gates();
  void add_deletable_gates(const std::string& value);
  void add_deletable_gates(std::string&& value);
  void add_deletable_gates(const char* value);
  void add_deletable_gates(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& deletable_gates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_deletable_gates();
  private:
  const std::string& _internal_deletable_gates(int index) const;
  std::string* _internal_add_deletable_gates();
  public:

  // @@protoc_insertion_point(class_scope:carrier.dev.sdk.GameServer.Spec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Spec_Constraint > constraints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> readiness_gates_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> deletable_gates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange) */ {
 public:
  inline GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange() : GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange(nullptr) {}
  virtual ~GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange();

  GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& from);
  GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange&& from) noexcept
    : GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange() {
    *this = ::std::move(from);
  }

  inline GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& operator=(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& operator=(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* internal_default_instance() {
    return reinterpret_cast<const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange*>(
               &_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& a, GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* New() const final {
    return CreateMaybeMessage<GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange>(nullptr);
  }

  GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& from);
  void MergeFrom(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange";
  }
  protected:
  explicit GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinPortFieldNumber = 1,
    kMaxPortFieldNumber = 2,
  };
  // int32 minPort = 1;
  void clear_minport();
  ::PROTOBUF_NAMESPACE_ID::int32 minport() const;
  void set_minport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minport() const;
  void _internal_set_minport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxPort = 2;
  void clear_maxport();
  ::PROTOBUF_NAMESPACE_ID::int32 maxport() const;
  void set_maxport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxport() const;
  void _internal_set_maxport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 minport_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort) */ {
 public:
  inline GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort() : GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort(nullptr) {}
  virtual ~GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort();

  GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort& from);
  GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort&& from) noexcept
    : GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort() {
    *this = ::std::move(from);
  }

  inline GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort& operator=(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort& operator=(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* internal_default_instance() {
    return reinterpret_cast<const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort*>(
               &_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort& a, GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* New() const final {
    return CreateMaybeMessage<GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort>(nullptr);
  }

  GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort& from);
  void MergeFrom(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort";
  }
  protected:
  explicit GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange PortRange;

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolFieldNumber = 5,
    kNameFieldNumber = 6,
    kContainerPortFieldNumber = 1,
    kExternalPortFieldNumber = 2,
    kContainerPortRangeFieldNumber = 3,
    kExternalPortRangeFieldNumber = 4,
  };
  // string protocol = 5;
  void clear_protocol();
  const std::string& protocol() const;
  void set_protocol(const std::string& value);
  void set_protocol(std::string&& value);
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  std::string* mutable_protocol();
  std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // string name = 6;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Int32Value container_port = 1;
  bool has_container_port() const;
  private:
  bool _internal_has_container_port() const;
  public:
  void clear_container_port();
  const PROTOBUF_NAMESPACE_ID::Int32Value& container_port() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_container_port();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_container_port();
  void set_allocated_container_port(PROTOBUF_NAMESPACE_ID::Int32Value* container_port);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_container_port() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_container_port();
  public:
  void unsafe_arena_set_allocated_container_port(
      PROTOBUF_NAMESPACE_ID::Int32Value* container_port);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_container_port();

  // .google.protobuf.Int32Value external_port = 2;
  bool has_external_port() const;
  private:
  bool _internal_has_external_port() const;
  public:
  void clear_external_port();
  const PROTOBUF_NAMESPACE_ID::Int32Value& external_port() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_external_port();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_external_port();
  void set_allocated_external_port(PROTOBUF_NAMESPACE_ID::Int32Value* external_port);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_external_port() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_external_port();
  public:
  void unsafe_arena_set_allocated_external_port(
      PROTOBUF_NAMESPACE_ID::Int32Value* external_port);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_external_port();

  // .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange container_port_range = 3;
  bool has_container_port_range() const;
  private:
  bool _internal_has_container_port_range() const;
  public:
  void clear_container_port_range();
  const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& container_port_range() const;
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* release_container_port_range();
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* mutable_container_port_range();
  void set_allocated_container_port_range(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* container_port_range);
  private:
  const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& _internal_container_port_range() const;
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* _internal_mutable_container_port_range();
  public:
  void unsafe_arena_set_allocated_container_port_range(
      ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* container_port_range);
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* unsafe_arena_release_container_port_range();

  // .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange external_port_range = 4;
  bool has_external_port_range() const;
  private:
  bool _internal_has_external_port_range() const;
  public:
  void clear_external_port_range();
  const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& external_port_range() const;
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* release_external_port_range();
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* mutable_external_port_range();
  void set_allocated_external_port_range(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* external_port_range);
  private:
  const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& _internal_external_port_range() const;
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* _internal_mutable_external_port_range();
  public:
  void unsafe_arena_set_allocated_external_port_range(
      ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* external_port_range);
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* unsafe_arena_release_external_port_range();

  // @@protoc_insertion_point(class_scope:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Int32Value* container_port_;
  PROTOBUF_NAMESPACE_ID::Int32Value* external_port_;
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* container_port_range_;
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* external_port_range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class GameServer_Status_LoadBalancerStatus_LoadBalancerIngress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress) */ {
 public:
  inline GameServer_Status_LoadBalancerStatus_LoadBalancerIngress() : GameServer_Status_LoadBalancerStatus_LoadBalancerIngress(nullptr) {}
  virtual ~GameServer_Status_LoadBalancerStatus_LoadBalancerIngress();

  GameServer_Status_LoadBalancerStatus_LoadBalancerIngress(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress& from);
  GameServer_Status_LoadBalancerStatus_LoadBalancerIngress(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress&& from) noexcept
    : GameServer_Status_LoadBalancerStatus_LoadBalancerIngress() {
    *this = ::std::move(from);
  }

  inline GameServer_Status_LoadBalancerStatus_LoadBalancerIngress& operator=(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServer_Status_LoadBalancerStatus_LoadBalancerIngress& operator=(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress* internal_default_instance() {
    return reinterpret_cast<const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress*>(
               &_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress& a, GameServer_Status_LoadBalancerStatus_LoadBalancerIngress& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServer_Status_LoadBalancerStatus_LoadBalancerIngress* New() const final {
    return CreateMaybeMessage<GameServer_Status_LoadBalancerStatus_LoadBalancerIngress>(nullptr);
  }

  GameServer_Status_LoadBalancerStatus_LoadBalancerIngress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServer_Status_LoadBalancerStatus_LoadBalancerIngress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress& from);
  void MergeFrom(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress";
  }
  protected:
  explicit GameServer_Status_LoadBalancerStatus_LoadBalancerIngress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort LoadBalancerPort;

  // accessors -------------------------------------------------------

  enum : int {
    kPortsFieldNumber = 2,
    kIpFieldNumber = 1,
  };
  // repeated .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort ports = 2;
  int ports_size() const;
  private:
  int _internal_ports_size() const;
  public:
  void clear_ports();
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* mutable_ports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort >*
      mutable_ports();
  private:
  const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort& _internal_ports(int index) const;
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* _internal_add_ports();
  public:
  const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort& ports(int index) const;
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* add_ports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort >&
      ports() const;

  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort > ports_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class GameServer_Status_LoadBalancerStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus) */ {
 public:
  inline GameServer_Status_LoadBalancerStatus() : GameServer_Status_LoadBalancerStatus(nullptr) {}
  virtual ~GameServer_Status_LoadBalancerStatus();

  GameServer_Status_LoadBalancerStatus(const GameServer_Status_LoadBalancerStatus& from);
  GameServer_Status_LoadBalancerStatus(GameServer_Status_LoadBalancerStatus&& from) noexcept
    : GameServer_Status_LoadBalancerStatus() {
    *this = ::std::move(from);
  }

  inline GameServer_Status_LoadBalancerStatus& operator=(const GameServer_Status_LoadBalancerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServer_Status_LoadBalancerStatus& operator=(GameServer_Status_LoadBalancerStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameServer_Status_LoadBalancerStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameServer_Status_LoadBalancerStatus* internal_default_instance() {
    return reinterpret_cast<const GameServer_Status_LoadBalancerStatus*>(
               &_GameServer_Status_LoadBalancerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GameServer_Status_LoadBalancerStatus& a, GameServer_Status_LoadBalancerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServer_Status_LoadBalancerStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServer_Status_LoadBalancerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServer_Status_LoadBalancerStatus* New() const final {
    return CreateMaybeMessage<GameServer_Status_LoadBalancerStatus>(nullptr);
  }

  GameServer_Status_LoadBalancerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServer_Status_LoadBalancerStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServer_Status_LoadBalancerStatus& from);
  void MergeFrom(const GameServer_Status_LoadBalancerStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServer_Status_LoadBalancerStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "carrier.dev.sdk.GameServer.Status.LoadBalancerStatus";
  }
  protected:
  explicit GameServer_Status_LoadBalancerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GameServer_Status_LoadBalancerStatus_LoadBalancerIngress LoadBalancerIngress;

  // accessors -------------------------------------------------------

  enum : int {
    kIngressFieldNumber = 1,
  };
  // repeated .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress ingress = 1;
  int ingress_size() const;
  private:
  int _internal_ingress_size() const;
  public:
  void clear_ingress();
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress* mutable_ingress(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress >*
      mutable_ingress();
  private:
  const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress& _internal_ingress(int index) const;
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress* _internal_add_ingress();
  public:
  const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress& ingress(int index) const;
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress* add_ingress();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress >&
      ingress() const;

  // @@protoc_insertion_point(class_scope:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress > ingress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class GameServer_Status_GameServerCondition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carrier.dev.sdk.GameServer.Status.GameServerCondition) */ {
 public:
  inline GameServer_Status_GameServerCondition() : GameServer_Status_GameServerCondition(nullptr) {}
  virtual ~GameServer_Status_GameServerCondition();

  GameServer_Status_GameServerCondition(const GameServer_Status_GameServerCondition& from);
  GameServer_Status_GameServerCondition(GameServer_Status_GameServerCondition&& from) noexcept
    : GameServer_Status_GameServerCondition() {
    *this = ::std::move(from);
  }

  inline GameServer_Status_GameServerCondition& operator=(const GameServer_Status_GameServerCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServer_Status_GameServerCondition& operator=(GameServer_Status_GameServerCondition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameServer_Status_GameServerCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameServer_Status_GameServerCondition* internal_default_instance() {
    return reinterpret_cast<const GameServer_Status_GameServerCondition*>(
               &_GameServer_Status_GameServerCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GameServer_Status_GameServerCondition& a, GameServer_Status_GameServerCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServer_Status_GameServerCondition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServer_Status_GameServerCondition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServer_Status_GameServerCondition* New() const final {
    return CreateMaybeMessage<GameServer_Status_GameServerCondition>(nullptr);
  }

  GameServer_Status_GameServerCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServer_Status_GameServerCondition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServer_Status_GameServerCondition& from);
  void MergeFrom(const GameServer_Status_GameServerCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServer_Status_GameServerCondition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "carrier.dev.sdk.GameServer.Status.GameServerCondition";
  }
  protected:
  explicit GameServer_Status_GameServerCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kStatusFieldNumber = 2,
    kMessageFieldNumber = 5,
    kLastProbeTimeFieldNumber = 3,
    kLastTransitionTimeFieldNumber = 4,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string status = 2;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string message = 5;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 last_probe_time = 3;
  void clear_last_probe_time();
  ::PROTOBUF_NAMESPACE_ID::int64 last_probe_time() const;
  void set_last_probe_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_probe_time() const;
  void _internal_set_last_probe_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 last_transition_time = 4;
  void clear_last_transition_time();
  ::PROTOBUF_NAMESPACE_ID::int64 last_transition_time() const;
  void set_last_transition_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_transition_time() const;
  void _internal_set_last_transition_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:carrier.dev.sdk.GameServer.Status.GameServerCondition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_probe_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_transition_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class GameServer_Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carrier.dev.sdk.GameServer.Status) */ {
 public:
  inline GameServer_Status() : GameServer_Status(nullptr) {}
  virtual ~GameServer_Status();

  GameServer_Status(const GameServer_Status& from);
  GameServer_Status(GameServer_Status&& from) noexcept
    : GameServer_Status() {
    *this = ::std::move(from);
  }

  inline GameServer_Status& operator=(const GameServer_Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServer_Status& operator=(GameServer_Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameServer_Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameServer_Status* internal_default_instance() {
    return reinterpret_cast<const GameServer_Status*>(
               &_GameServer_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GameServer_Status& a, GameServer_Status& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServer_Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServer_Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServer_Status* New() const final {
    return CreateMaybeMessage<GameServer_Status>(nullptr);
  }

  GameServer_Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServer_Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServer_Status& from);
  void MergeFrom(const GameServer_Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServer_Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "carrier.dev.sdk.GameServer.Status";
  }
  protected:
  explicit GameServer_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GameServer_Status_LoadBalancerStatus LoadBalancerStatus;
  typedef GameServer_Status_GameServerCondition GameServerCondition;

  // accessors -------------------------------------------------------

  enum : int {
    kConditionsFieldNumber = 5,
    kStateFieldNumber = 1,
    kAddressFieldNumber = 2,
    kNodeNameFieldNumber = 3,
    kLoadBalancerStatusFieldNumber = 4,
  };
  // repeated .carrier.dev.sdk.GameServer.Status.GameServerCondition conditions = 5;
  int conditions_size() const;
  private:
  int _internal_conditions_size() const;
  public:
  void clear_conditions();
  ::carrier::dev::sdk::GameServer_Status_GameServerCondition* mutable_conditions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Status_GameServerCondition >*
      mutable_conditions();
  private:
  const ::carrier::dev::sdk::GameServer_Status_GameServerCondition& _internal_conditions(int index) const;
  ::carrier::dev::sdk::GameServer_Status_GameServerCondition* _internal_add_conditions();
  public:
  const ::carrier::dev::sdk::GameServer_Status_GameServerCondition& conditions(int index) const;
  ::carrier::dev::sdk::GameServer_Status_GameServerCondition* add_conditions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Status_GameServerCondition >&
      conditions() const;

  // string state = 1;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string nodeName = 3;
  void clear_nodename();
  const std::string& nodename() const;
  void set_nodename(const std::string& value);
  void set_nodename(std::string&& value);
  void set_nodename(const char* value);
  void set_nodename(const char* value, size_t size);
  std::string* mutable_nodename();
  std::string* release_nodename();
  void set_allocated_nodename(std::string* nodename);
  private:
  const std::string& _internal_nodename() const;
  void _internal_set_nodename(const std::string& value);
  std::string* _internal_mutable_nodename();
  public:

  // .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus load_balancer_status = 4;
  bool has_load_balancer_status() const;
  private:
  bool _internal_has_load_balancer_status() const;
  public:
  void clear_load_balancer_status();
  const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus& load_balancer_status() const;
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus* release_load_balancer_status();
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus* mutable_load_balancer_status();
  void set_allocated_load_balancer_status(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus* load_balancer_status);
  private:
  const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus& _internal_load_balancer_status() const;
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus* _internal_mutable_load_balancer_status();
  public:
  void unsafe_arena_set_allocated_load_balancer_status(
      ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus* load_balancer_status);
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus* unsafe_arena_release_load_balancer_status();

  // @@protoc_insertion_point(class_scope:carrier.dev.sdk.GameServer.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Status_GameServerCondition > conditions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodename_;
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus* load_balancer_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// -------------------------------------------------------------------

class GameServer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:carrier.dev.sdk.GameServer) */ {
 public:
  inline GameServer() : GameServer(nullptr) {}
  virtual ~GameServer();

  GameServer(const GameServer& from);
  GameServer(GameServer&& from) noexcept
    : GameServer() {
    *this = ::std::move(from);
  }

  inline GameServer& operator=(const GameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServer& operator=(GameServer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameServer* internal_default_instance() {
    return reinterpret_cast<const GameServer*>(
               &_GameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GameServer& a, GameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServer* New() const final {
    return CreateMaybeMessage<GameServer>(nullptr);
  }

  GameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServer& from);
  void MergeFrom(const GameServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "carrier.dev.sdk.GameServer";
  }
  protected:
  explicit GameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_2eproto);
    return ::descriptor_table_sdk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GameServer_ObjectMeta ObjectMeta;
  typedef GameServer_Spec Spec;
  typedef GameServer_Status Status;

  // accessors -------------------------------------------------------

  enum : int {
    kObjectMetaFieldNumber = 1,
    kSpecFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // .carrier.dev.sdk.GameServer.ObjectMeta object_meta = 1;
  bool has_object_meta() const;
  private:
  bool _internal_has_object_meta() const;
  public:
  void clear_object_meta();
  const ::carrier::dev::sdk::GameServer_ObjectMeta& object_meta() const;
  ::carrier::dev::sdk::GameServer_ObjectMeta* release_object_meta();
  ::carrier::dev::sdk::GameServer_ObjectMeta* mutable_object_meta();
  void set_allocated_object_meta(::carrier::dev::sdk::GameServer_ObjectMeta* object_meta);
  private:
  const ::carrier::dev::sdk::GameServer_ObjectMeta& _internal_object_meta() const;
  ::carrier::dev::sdk::GameServer_ObjectMeta* _internal_mutable_object_meta();
  public:
  void unsafe_arena_set_allocated_object_meta(
      ::carrier::dev::sdk::GameServer_ObjectMeta* object_meta);
  ::carrier::dev::sdk::GameServer_ObjectMeta* unsafe_arena_release_object_meta();

  // .carrier.dev.sdk.GameServer.Spec spec = 2;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::carrier::dev::sdk::GameServer_Spec& spec() const;
  ::carrier::dev::sdk::GameServer_Spec* release_spec();
  ::carrier::dev::sdk::GameServer_Spec* mutable_spec();
  void set_allocated_spec(::carrier::dev::sdk::GameServer_Spec* spec);
  private:
  const ::carrier::dev::sdk::GameServer_Spec& _internal_spec() const;
  ::carrier::dev::sdk::GameServer_Spec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::carrier::dev::sdk::GameServer_Spec* spec);
  ::carrier::dev::sdk::GameServer_Spec* unsafe_arena_release_spec();

  // .carrier.dev.sdk.GameServer.Status status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::carrier::dev::sdk::GameServer_Status& status() const;
  ::carrier::dev::sdk::GameServer_Status* release_status();
  ::carrier::dev::sdk::GameServer_Status* mutable_status();
  void set_allocated_status(::carrier::dev::sdk::GameServer_Status* status);
  private:
  const ::carrier::dev::sdk::GameServer_Status& _internal_status() const;
  ::carrier::dev::sdk::GameServer_Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::carrier::dev::sdk::GameServer_Status* status);
  ::carrier::dev::sdk::GameServer_Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:carrier.dev.sdk.GameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::carrier::dev::sdk::GameServer_ObjectMeta* object_meta_;
  ::carrier::dev::sdk::GameServer_Spec* spec_;
  ::carrier::dev::sdk::GameServer_Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// BoolValue

// bool value = 1;
inline void BoolValue::clear_value() {
  value_ = false;
}
inline bool BoolValue::_internal_value() const {
  return value_;
}
inline bool BoolValue::value() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.BoolValue.value)
  return _internal_value();
}
inline void BoolValue::_internal_set_value(bool value) {
  
  value_ = value;
}
inline void BoolValue::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.BoolValue.value)
}

// -------------------------------------------------------------------

// KeyValue

// string key = 1;
inline void KeyValue::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.KeyValue.key)
  return _internal_key();
}
inline void KeyValue::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.KeyValue.key)
}
inline std::string* KeyValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.KeyValue.key)
  return _internal_mutable_key();
}
inline const std::string& KeyValue::_internal_key() const {
  return key_.Get();
}
inline void KeyValue::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyValue::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:carrier.dev.sdk.KeyValue.key)
}
inline void KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:carrier.dev.sdk.KeyValue.key)
}
inline void KeyValue::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:carrier.dev.sdk.KeyValue.key)
}
inline std::string* KeyValue::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.KeyValue.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.KeyValue.key)
}

// string value = 2;
inline void KeyValue::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.KeyValue.value)
  return _internal_value();
}
inline void KeyValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.KeyValue.value)
}
inline std::string* KeyValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.KeyValue.value)
  return _internal_mutable_value();
}
inline const std::string& KeyValue::_internal_value() const {
  return value_.Get();
}
inline void KeyValue::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyValue::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:carrier.dev.sdk.KeyValue.value)
}
inline void KeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:carrier.dev.sdk.KeyValue.value)
}
inline void KeyValue::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:carrier.dev.sdk.KeyValue.value)
}
inline std::string* KeyValue::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.KeyValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.KeyValue.value)
}

// -------------------------------------------------------------------

// Duration

// int64 seconds = 1;
inline void Duration::clear_seconds() {
  seconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Duration::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Duration::seconds() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.Duration.seconds)
  return _internal_seconds();
}
inline void Duration::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seconds_ = value;
}
inline void Duration::set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.Duration.seconds)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GameServer_ObjectMeta

// string name = 1;
inline void GameServer_ObjectMeta::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GameServer_ObjectMeta::name() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.ObjectMeta.name)
  return _internal_name();
}
inline void GameServer_ObjectMeta::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.ObjectMeta.name)
}
inline std::string* GameServer_ObjectMeta::mutable_name() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.ObjectMeta.name)
  return _internal_mutable_name();
}
inline const std::string& GameServer_ObjectMeta::_internal_name() const {
  return name_.Get();
}
inline void GameServer_ObjectMeta::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameServer_ObjectMeta::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:carrier.dev.sdk.GameServer.ObjectMeta.name)
}
inline void GameServer_ObjectMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:carrier.dev.sdk.GameServer.ObjectMeta.name)
}
inline void GameServer_ObjectMeta::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:carrier.dev.sdk.GameServer.ObjectMeta.name)
}
inline std::string* GameServer_ObjectMeta::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameServer_ObjectMeta::release_name() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.ObjectMeta.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_ObjectMeta::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.ObjectMeta.name)
}

// string namespace = 2;
inline void GameServer_ObjectMeta::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GameServer_ObjectMeta::namespace_() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.ObjectMeta.namespace)
  return _internal_namespace_();
}
inline void GameServer_ObjectMeta::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.ObjectMeta.namespace)
}
inline std::string* GameServer_ObjectMeta::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.ObjectMeta.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& GameServer_ObjectMeta::_internal_namespace_() const {
  return namespace__.Get();
}
inline void GameServer_ObjectMeta::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameServer_ObjectMeta::set_namespace_(std::string&& value) {
  
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:carrier.dev.sdk.GameServer.ObjectMeta.namespace)
}
inline void GameServer_ObjectMeta::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:carrier.dev.sdk.GameServer.ObjectMeta.namespace)
}
inline void GameServer_ObjectMeta::set_namespace_(const char* value,
    size_t size) {
  
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:carrier.dev.sdk.GameServer.ObjectMeta.namespace)
}
inline std::string* GameServer_ObjectMeta::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameServer_ObjectMeta::release_namespace_() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.ObjectMeta.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_ObjectMeta::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.ObjectMeta.namespace)
}

// string uid = 3;
inline void GameServer_ObjectMeta::clear_uid() {
  uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GameServer_ObjectMeta::uid() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.ObjectMeta.uid)
  return _internal_uid();
}
inline void GameServer_ObjectMeta::set_uid(const std::string& value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.ObjectMeta.uid)
}
inline std::string* GameServer_ObjectMeta::mutable_uid() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.ObjectMeta.uid)
  return _internal_mutable_uid();
}
inline const std::string& GameServer_ObjectMeta::_internal_uid() const {
  return uid_.Get();
}
inline void GameServer_ObjectMeta::_internal_set_uid(const std::string& value) {
  
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameServer_ObjectMeta::set_uid(std::string&& value) {
  
  uid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:carrier.dev.sdk.GameServer.ObjectMeta.uid)
}
inline void GameServer_ObjectMeta::set_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:carrier.dev.sdk.GameServer.ObjectMeta.uid)
}
inline void GameServer_ObjectMeta::set_uid(const char* value,
    size_t size) {
  
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:carrier.dev.sdk.GameServer.ObjectMeta.uid)
}
inline std::string* GameServer_ObjectMeta::_internal_mutable_uid() {
  
  return uid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameServer_ObjectMeta::release_uid() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.ObjectMeta.uid)
  return uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_ObjectMeta::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.ObjectMeta.uid)
}

// string resource_version = 4;
inline void GameServer_ObjectMeta::clear_resource_version() {
  resource_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GameServer_ObjectMeta::resource_version() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.ObjectMeta.resource_version)
  return _internal_resource_version();
}
inline void GameServer_ObjectMeta::set_resource_version(const std::string& value) {
  _internal_set_resource_version(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.ObjectMeta.resource_version)
}
inline std::string* GameServer_ObjectMeta::mutable_resource_version() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.ObjectMeta.resource_version)
  return _internal_mutable_resource_version();
}
inline const std::string& GameServer_ObjectMeta::_internal_resource_version() const {
  return resource_version_.Get();
}
inline void GameServer_ObjectMeta::_internal_set_resource_version(const std::string& value) {
  
  resource_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameServer_ObjectMeta::set_resource_version(std::string&& value) {
  
  resource_version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:carrier.dev.sdk.GameServer.ObjectMeta.resource_version)
}
inline void GameServer_ObjectMeta::set_resource_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:carrier.dev.sdk.GameServer.ObjectMeta.resource_version)
}
inline void GameServer_ObjectMeta::set_resource_version(const char* value,
    size_t size) {
  
  resource_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:carrier.dev.sdk.GameServer.ObjectMeta.resource_version)
}
inline std::string* GameServer_ObjectMeta::_internal_mutable_resource_version() {
  
  return resource_version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameServer_ObjectMeta::release_resource_version() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.ObjectMeta.resource_version)
  return resource_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_ObjectMeta::set_allocated_resource_version(std::string* resource_version) {
  if (resource_version != nullptr) {
    
  } else {
    
  }
  resource_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.ObjectMeta.resource_version)
}

// int64 generation = 5;
inline void GameServer_ObjectMeta::clear_generation() {
  generation_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_ObjectMeta::_internal_generation() const {
  return generation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_ObjectMeta::generation() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.ObjectMeta.generation)
  return _internal_generation();
}
inline void GameServer_ObjectMeta::_internal_set_generation(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  generation_ = value;
}
inline void GameServer_ObjectMeta::set_generation(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_generation(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.ObjectMeta.generation)
}

// int64 creation_timestamp = 6;
inline void GameServer_ObjectMeta::clear_creation_timestamp() {
  creation_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_ObjectMeta::_internal_creation_timestamp() const {
  return creation_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_ObjectMeta::creation_timestamp() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.ObjectMeta.creation_timestamp)
  return _internal_creation_timestamp();
}
inline void GameServer_ObjectMeta::_internal_set_creation_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  creation_timestamp_ = value;
}
inline void GameServer_ObjectMeta::set_creation_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_creation_timestamp(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.ObjectMeta.creation_timestamp)
}

// int64 deletion_timestamp = 7;
inline void GameServer_ObjectMeta::clear_deletion_timestamp() {
  deletion_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_ObjectMeta::_internal_deletion_timestamp() const {
  return deletion_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_ObjectMeta::deletion_timestamp() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.ObjectMeta.deletion_timestamp)
  return _internal_deletion_timestamp();
}
inline void GameServer_ObjectMeta::_internal_set_deletion_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  deletion_timestamp_ = value;
}
inline void GameServer_ObjectMeta::set_deletion_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_deletion_timestamp(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.ObjectMeta.deletion_timestamp)
}

// map<string, string> annotations = 8;
inline int GameServer_ObjectMeta::_internal_annotations_size() const {
  return annotations_.size();
}
inline int GameServer_ObjectMeta::annotations_size() const {
  return _internal_annotations_size();
}
inline void GameServer_ObjectMeta::clear_annotations() {
  annotations_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GameServer_ObjectMeta::_internal_annotations() const {
  return annotations_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GameServer_ObjectMeta::annotations() const {
  // @@protoc_insertion_point(field_map:carrier.dev.sdk.GameServer.ObjectMeta.annotations)
  return _internal_annotations();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GameServer_ObjectMeta::_internal_mutable_annotations() {
  return annotations_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GameServer_ObjectMeta::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:carrier.dev.sdk.GameServer.ObjectMeta.annotations)
  return _internal_mutable_annotations();
}

// map<string, string> labels = 9;
inline int GameServer_ObjectMeta::_internal_labels_size() const {
  return labels_.size();
}
inline int GameServer_ObjectMeta::labels_size() const {
  return _internal_labels_size();
}
inline void GameServer_ObjectMeta::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GameServer_ObjectMeta::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GameServer_ObjectMeta::labels() const {
  // @@protoc_insertion_point(field_map:carrier.dev.sdk.GameServer.ObjectMeta.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GameServer_ObjectMeta::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GameServer_ObjectMeta::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:carrier.dev.sdk.GameServer.ObjectMeta.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// GameServer_Spec_Constraint

// string type = 1;
inline void GameServer_Spec_Constraint::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GameServer_Spec_Constraint::type() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Spec.Constraint.type)
  return _internal_type();
}
inline void GameServer_Spec_Constraint::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Spec.Constraint.type)
}
inline std::string* GameServer_Spec_Constraint::mutable_type() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Spec.Constraint.type)
  return _internal_mutable_type();
}
inline const std::string& GameServer_Spec_Constraint::_internal_type() const {
  return type_.Get();
}
inline void GameServer_Spec_Constraint::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameServer_Spec_Constraint::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:carrier.dev.sdk.GameServer.Spec.Constraint.type)
}
inline void GameServer_Spec_Constraint::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:carrier.dev.sdk.GameServer.Spec.Constraint.type)
}
inline void GameServer_Spec_Constraint::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:carrier.dev.sdk.GameServer.Spec.Constraint.type)
}
inline std::string* GameServer_Spec_Constraint::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameServer_Spec_Constraint::release_type() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.Spec.Constraint.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_Spec_Constraint::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.Spec.Constraint.type)
}

// bool effective = 2;
inline void GameServer_Spec_Constraint::clear_effective() {
  effective_ = false;
}
inline bool GameServer_Spec_Constraint::_internal_effective() const {
  return effective_;
}
inline bool GameServer_Spec_Constraint::effective() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Spec.Constraint.effective)
  return _internal_effective();
}
inline void GameServer_Spec_Constraint::_internal_set_effective(bool value) {
  
  effective_ = value;
}
inline void GameServer_Spec_Constraint::set_effective(bool value) {
  _internal_set_effective(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Spec.Constraint.effective)
}

// string message = 3;
inline void GameServer_Spec_Constraint::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GameServer_Spec_Constraint::message() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Spec.Constraint.message)
  return _internal_message();
}
inline void GameServer_Spec_Constraint::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Spec.Constraint.message)
}
inline std::string* GameServer_Spec_Constraint::mutable_message() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Spec.Constraint.message)
  return _internal_mutable_message();
}
inline const std::string& GameServer_Spec_Constraint::_internal_message() const {
  return message_.Get();
}
inline void GameServer_Spec_Constraint::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameServer_Spec_Constraint::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:carrier.dev.sdk.GameServer.Spec.Constraint.message)
}
inline void GameServer_Spec_Constraint::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:carrier.dev.sdk.GameServer.Spec.Constraint.message)
}
inline void GameServer_Spec_Constraint::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:carrier.dev.sdk.GameServer.Spec.Constraint.message)
}
inline std::string* GameServer_Spec_Constraint::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameServer_Spec_Constraint::release_message() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.Spec.Constraint.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_Spec_Constraint::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.Spec.Constraint.message)
}

// int64 timeAdded = 4;
inline void GameServer_Spec_Constraint::clear_timeadded() {
  timeadded_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_Spec_Constraint::_internal_timeadded() const {
  return timeadded_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_Spec_Constraint::timeadded() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Spec.Constraint.timeAdded)
  return _internal_timeadded();
}
inline void GameServer_Spec_Constraint::_internal_set_timeadded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timeadded_ = value;
}
inline void GameServer_Spec_Constraint::set_timeadded(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timeadded(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Spec.Constraint.timeAdded)
}

// -------------------------------------------------------------------

// GameServer_Spec

// repeated .carrier.dev.sdk.GameServer.Spec.Constraint constraints = 1;
inline int GameServer_Spec::_internal_constraints_size() const {
  return constraints_.size();
}
inline int GameServer_Spec::constraints_size() const {
  return _internal_constraints_size();
}
inline void GameServer_Spec::clear_constraints() {
  constraints_.Clear();
}
inline ::carrier::dev::sdk::GameServer_Spec_Constraint* GameServer_Spec::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Spec.constraints)
  return constraints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Spec_Constraint >*
GameServer_Spec::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:carrier.dev.sdk.GameServer.Spec.constraints)
  return &constraints_;
}
inline const ::carrier::dev::sdk::GameServer_Spec_Constraint& GameServer_Spec::_internal_constraints(int index) const {
  return constraints_.Get(index);
}
inline const ::carrier::dev::sdk::GameServer_Spec_Constraint& GameServer_Spec::constraints(int index) const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Spec.constraints)
  return _internal_constraints(index);
}
inline ::carrier::dev::sdk::GameServer_Spec_Constraint* GameServer_Spec::_internal_add_constraints() {
  return constraints_.Add();
}
inline ::carrier::dev::sdk::GameServer_Spec_Constraint* GameServer_Spec::add_constraints() {
  // @@protoc_insertion_point(field_add:carrier.dev.sdk.GameServer.Spec.constraints)
  return _internal_add_constraints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Spec_Constraint >&
GameServer_Spec::constraints() const {
  // @@protoc_insertion_point(field_list:carrier.dev.sdk.GameServer.Spec.constraints)
  return constraints_;
}

// repeated string readiness_gates = 2;
inline int GameServer_Spec::_internal_readiness_gates_size() const {
  return readiness_gates_.size();
}
inline int GameServer_Spec::readiness_gates_size() const {
  return _internal_readiness_gates_size();
}
inline void GameServer_Spec::clear_readiness_gates() {
  readiness_gates_.Clear();
}
inline std::string* GameServer_Spec::add_readiness_gates() {
  // @@protoc_insertion_point(field_add_mutable:carrier.dev.sdk.GameServer.Spec.readiness_gates)
  return _internal_add_readiness_gates();
}
inline const std::string& GameServer_Spec::_internal_readiness_gates(int index) const {
  return readiness_gates_.Get(index);
}
inline const std::string& GameServer_Spec::readiness_gates(int index) const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Spec.readiness_gates)
  return _internal_readiness_gates(index);
}
inline std::string* GameServer_Spec::mutable_readiness_gates(int index) {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Spec.readiness_gates)
  return readiness_gates_.Mutable(index);
}
inline void GameServer_Spec::set_readiness_gates(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Spec.readiness_gates)
  readiness_gates_.Mutable(index)->assign(value);
}
inline void GameServer_Spec::set_readiness_gates(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Spec.readiness_gates)
  readiness_gates_.Mutable(index)->assign(std::move(value));
}
inline void GameServer_Spec::set_readiness_gates(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  readiness_gates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:carrier.dev.sdk.GameServer.Spec.readiness_gates)
}
inline void GameServer_Spec::set_readiness_gates(int index, const char* value, size_t size) {
  readiness_gates_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:carrier.dev.sdk.GameServer.Spec.readiness_gates)
}
inline std::string* GameServer_Spec::_internal_add_readiness_gates() {
  return readiness_gates_.Add();
}
inline void GameServer_Spec::add_readiness_gates(const std::string& value) {
  readiness_gates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:carrier.dev.sdk.GameServer.Spec.readiness_gates)
}
inline void GameServer_Spec::add_readiness_gates(std::string&& value) {
  readiness_gates_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:carrier.dev.sdk.GameServer.Spec.readiness_gates)
}
inline void GameServer_Spec::add_readiness_gates(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  readiness_gates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:carrier.dev.sdk.GameServer.Spec.readiness_gates)
}
inline void GameServer_Spec::add_readiness_gates(const char* value, size_t size) {
  readiness_gates_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:carrier.dev.sdk.GameServer.Spec.readiness_gates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GameServer_Spec::readiness_gates() const {
  // @@protoc_insertion_point(field_list:carrier.dev.sdk.GameServer.Spec.readiness_gates)
  return readiness_gates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GameServer_Spec::mutable_readiness_gates() {
  // @@protoc_insertion_point(field_mutable_list:carrier.dev.sdk.GameServer.Spec.readiness_gates)
  return &readiness_gates_;
}

// repeated string deletable_gates = 3;
inline int GameServer_Spec::_internal_deletable_gates_size() const {
  return deletable_gates_.size();
}
inline int GameServer_Spec::deletable_gates_size() const {
  return _internal_deletable_gates_size();
}
inline void GameServer_Spec::clear_deletable_gates() {
  deletable_gates_.Clear();
}
inline std::string* GameServer_Spec::add_deletable_gates() {
  // @@protoc_insertion_point(field_add_mutable:carrier.dev.sdk.GameServer.Spec.deletable_gates)
  return _internal_add_deletable_gates();
}
inline const std::string& GameServer_Spec::_internal_deletable_gates(int index) const {
  return deletable_gates_.Get(index);
}
inline const std::string& GameServer_Spec::deletable_gates(int index) const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Spec.deletable_gates)
  return _internal_deletable_gates(index);
}
inline std::string* GameServer_Spec::mutable_deletable_gates(int index) {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Spec.deletable_gates)
  return deletable_gates_.Mutable(index);
}
inline void GameServer_Spec::set_deletable_gates(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Spec.deletable_gates)
  deletable_gates_.Mutable(index)->assign(value);
}
inline void GameServer_Spec::set_deletable_gates(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Spec.deletable_gates)
  deletable_gates_.Mutable(index)->assign(std::move(value));
}
inline void GameServer_Spec::set_deletable_gates(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deletable_gates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:carrier.dev.sdk.GameServer.Spec.deletable_gates)
}
inline void GameServer_Spec::set_deletable_gates(int index, const char* value, size_t size) {
  deletable_gates_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:carrier.dev.sdk.GameServer.Spec.deletable_gates)
}
inline std::string* GameServer_Spec::_internal_add_deletable_gates() {
  return deletable_gates_.Add();
}
inline void GameServer_Spec::add_deletable_gates(const std::string& value) {
  deletable_gates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:carrier.dev.sdk.GameServer.Spec.deletable_gates)
}
inline void GameServer_Spec::add_deletable_gates(std::string&& value) {
  deletable_gates_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:carrier.dev.sdk.GameServer.Spec.deletable_gates)
}
inline void GameServer_Spec::add_deletable_gates(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deletable_gates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:carrier.dev.sdk.GameServer.Spec.deletable_gates)
}
inline void GameServer_Spec::add_deletable_gates(const char* value, size_t size) {
  deletable_gates_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:carrier.dev.sdk.GameServer.Spec.deletable_gates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GameServer_Spec::deletable_gates() const {
  // @@protoc_insertion_point(field_list:carrier.dev.sdk.GameServer.Spec.deletable_gates)
  return deletable_gates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GameServer_Spec::mutable_deletable_gates() {
  // @@protoc_insertion_point(field_mutable_list:carrier.dev.sdk.GameServer.Spec.deletable_gates)
  return &deletable_gates_;
}

// -------------------------------------------------------------------

// GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange

// int32 minPort = 1;
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::clear_minport() {
  minport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::_internal_minport() const {
  return minport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::minport() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange.minPort)
  return _internal_minport();
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::_internal_set_minport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minport_ = value;
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::set_minport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minport(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange.minPort)
}

// int32 maxPort = 2;
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::clear_maxport() {
  maxport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::_internal_maxport() const {
  return maxport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::maxport() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange.maxPort)
  return _internal_maxport();
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::_internal_set_maxport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxport_ = value;
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::set_maxport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxport(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange.maxPort)
}

// -------------------------------------------------------------------

// GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort

// .google.protobuf.Int32Value container_port = 1;
inline bool GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_internal_has_container_port() const {
  return this != internal_default_instance() && container_port_ != nullptr;
}
inline bool GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::has_container_port() const {
  return _internal_has_container_port();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_internal_container_port() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = container_port_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value*>(
      &PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::container_port() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.container_port)
  return _internal_container_port();
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::unsafe_arena_set_allocated_container_port(
    PROTOBUF_NAMESPACE_ID::Int32Value* container_port) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_port_);
  }
  container_port_ = container_port;
  if (container_port) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.container_port)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::release_container_port() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = container_port_;
  container_port_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::unsafe_arena_release_container_port() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.container_port)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = container_port_;
  container_port_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_internal_mutable_container_port() {
  
  if (container_port_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    container_port_ = p;
  }
  return container_port_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::mutable_container_port() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.container_port)
  return _internal_mutable_container_port();
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::set_allocated_container_port(PROTOBUF_NAMESPACE_ID::Int32Value* container_port) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_port_);
  }
  if (container_port) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_port)->GetArena();
    if (message_arena != submessage_arena) {
      container_port = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, container_port, submessage_arena);
    }
    
  } else {
    
  }
  container_port_ = container_port;
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.container_port)
}

// .google.protobuf.Int32Value external_port = 2;
inline bool GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_internal_has_external_port() const {
  return this != internal_default_instance() && external_port_ != nullptr;
}
inline bool GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::has_external_port() const {
  return _internal_has_external_port();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_internal_external_port() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = external_port_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value*>(
      &PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::external_port() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.external_port)
  return _internal_external_port();
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::unsafe_arena_set_allocated_external_port(
    PROTOBUF_NAMESPACE_ID::Int32Value* external_port) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(external_port_);
  }
  external_port_ = external_port;
  if (external_port) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.external_port)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::release_external_port() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = external_port_;
  external_port_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::unsafe_arena_release_external_port() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.external_port)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = external_port_;
  external_port_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_internal_mutable_external_port() {
  
  if (external_port_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    external_port_ = p;
  }
  return external_port_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::mutable_external_port() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.external_port)
  return _internal_mutable_external_port();
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::set_allocated_external_port(PROTOBUF_NAMESPACE_ID::Int32Value* external_port) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(external_port_);
  }
  if (external_port) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(external_port)->GetArena();
    if (message_arena != submessage_arena) {
      external_port = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, external_port, submessage_arena);
    }
    
  } else {
    
  }
  external_port_ = external_port;
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.external_port)
}

// .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange container_port_range = 3;
inline bool GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_internal_has_container_port_range() const {
  return this != internal_default_instance() && container_port_range_ != nullptr;
}
inline bool GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::has_container_port_range() const {
  return _internal_has_container_port_range();
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::clear_container_port_range() {
  if (GetArena() == nullptr && container_port_range_ != nullptr) {
    delete container_port_range_;
  }
  container_port_range_ = nullptr;
}
inline const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_internal_container_port_range() const {
  const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* p = container_port_range_;
  return p != nullptr ? *p : *reinterpret_cast<const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange*>(
      &::carrier::dev::sdk::_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange_default_instance_);
}
inline const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::container_port_range() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.container_port_range)
  return _internal_container_port_range();
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::unsafe_arena_set_allocated_container_port_range(
    ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* container_port_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(container_port_range_);
  }
  container_port_range_ = container_port_range;
  if (container_port_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.container_port_range)
}
inline ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::release_container_port_range() {
  
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* temp = container_port_range_;
  container_port_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::unsafe_arena_release_container_port_range() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.container_port_range)
  
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* temp = container_port_range_;
  container_port_range_ = nullptr;
  return temp;
}
inline ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_internal_mutable_container_port_range() {
  
  if (container_port_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange>(GetArena());
    container_port_range_ = p;
  }
  return container_port_range_;
}
inline ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::mutable_container_port_range() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.container_port_range)
  return _internal_mutable_container_port_range();
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::set_allocated_container_port_range(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* container_port_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete container_port_range_;
  }
  if (container_port_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(container_port_range);
    if (message_arena != submessage_arena) {
      container_port_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, container_port_range, submessage_arena);
    }
    
  } else {
    
  }
  container_port_range_ = container_port_range;
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.container_port_range)
}

// .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange external_port_range = 4;
inline bool GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_internal_has_external_port_range() const {
  return this != internal_default_instance() && external_port_range_ != nullptr;
}
inline bool GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::has_external_port_range() const {
  return _internal_has_external_port_range();
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::clear_external_port_range() {
  if (GetArena() == nullptr && external_port_range_ != nullptr) {
    delete external_port_range_;
  }
  external_port_range_ = nullptr;
}
inline const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_internal_external_port_range() const {
  const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* p = external_port_range_;
  return p != nullptr ? *p : *reinterpret_cast<const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange*>(
      &::carrier::dev::sdk::_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange_default_instance_);
}
inline const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::external_port_range() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.external_port_range)
  return _internal_external_port_range();
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::unsafe_arena_set_allocated_external_port_range(
    ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* external_port_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(external_port_range_);
  }
  external_port_range_ = external_port_range;
  if (external_port_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.external_port_range)
}
inline ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::release_external_port_range() {
  
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* temp = external_port_range_;
  external_port_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::unsafe_arena_release_external_port_range() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.external_port_range)
  
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* temp = external_port_range_;
  external_port_range_ = nullptr;
  return temp;
}
inline ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_internal_mutable_external_port_range() {
  
  if (external_port_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange>(GetArena());
    external_port_range_ = p;
  }
  return external_port_range_;
}
inline ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::mutable_external_port_range() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.external_port_range)
  return _internal_mutable_external_port_range();
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::set_allocated_external_port_range(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* external_port_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete external_port_range_;
  }
  if (external_port_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(external_port_range);
    if (message_arena != submessage_arena) {
      external_port_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, external_port_range, submessage_arena);
    }
    
  } else {
    
  }
  external_port_range_ = external_port_range;
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.external_port_range)
}

// string protocol = 5;
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::clear_protocol() {
  protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::protocol() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.protocol)
  return _internal_protocol();
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::set_protocol(const std::string& value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.protocol)
}
inline std::string* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::mutable_protocol() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.protocol)
  return _internal_mutable_protocol();
}
inline const std::string& GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_internal_protocol() const {
  return protocol_.Get();
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_internal_set_protocol(const std::string& value) {
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::set_protocol(std::string&& value) {
  
  protocol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.protocol)
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.protocol)
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::set_protocol(const char* value,
    size_t size) {
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.protocol)
}
inline std::string* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_internal_mutable_protocol() {
  
  return protocol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::release_protocol() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.protocol)
  return protocol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.protocol)
}

// string name = 6;
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::name() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.name)
  return _internal_name();
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.name)
}
inline std::string* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::mutable_name() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.name)
  return _internal_mutable_name();
}
inline const std::string& GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_internal_name() const {
  return name_.Get();
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.name)
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.name)
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.name)
}
inline std::string* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::release_name() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.name)
}

// -------------------------------------------------------------------

// GameServer_Status_LoadBalancerStatus_LoadBalancerIngress

// string ip = 1;
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::ip() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.ip)
  return _internal_ip();
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.ip)
}
inline std::string* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.ip)
  return _internal_mutable_ip();
}
inline const std::string& GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::_internal_ip() const {
  return ip_.Get();
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.ip)
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.ip)
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.ip)
}
inline std::string* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::release_ip() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.ip)
}

// repeated .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort ports = 2;
inline int GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::_internal_ports_size() const {
  return ports_.size();
}
inline int GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::ports_size() const {
  return _internal_ports_size();
}
inline void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::clear_ports() {
  ports_.Clear();
}
inline ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::mutable_ports(int index) {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.ports)
  return ports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort >*
GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.ports)
  return &ports_;
}
inline const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort& GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::_internal_ports(int index) const {
  return ports_.Get(index);
}
inline const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort& GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::ports(int index) const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.ports)
  return _internal_ports(index);
}
inline ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::_internal_add_ports() {
  return ports_.Add();
}
inline ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::add_ports() {
  // @@protoc_insertion_point(field_add:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.ports)
  return _internal_add_ports();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort >&
GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::ports() const {
  // @@protoc_insertion_point(field_list:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.ports)
  return ports_;
}

// -------------------------------------------------------------------

// GameServer_Status_LoadBalancerStatus

// repeated .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress ingress = 1;
inline int GameServer_Status_LoadBalancerStatus::_internal_ingress_size() const {
  return ingress_.size();
}
inline int GameServer_Status_LoadBalancerStatus::ingress_size() const {
  return _internal_ingress_size();
}
inline void GameServer_Status_LoadBalancerStatus::clear_ingress() {
  ingress_.Clear();
}
inline ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress* GameServer_Status_LoadBalancerStatus::mutable_ingress(int index) {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.ingress)
  return ingress_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress >*
GameServer_Status_LoadBalancerStatus::mutable_ingress() {
  // @@protoc_insertion_point(field_mutable_list:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.ingress)
  return &ingress_;
}
inline const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress& GameServer_Status_LoadBalancerStatus::_internal_ingress(int index) const {
  return ingress_.Get(index);
}
inline const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress& GameServer_Status_LoadBalancerStatus::ingress(int index) const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.ingress)
  return _internal_ingress(index);
}
inline ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress* GameServer_Status_LoadBalancerStatus::_internal_add_ingress() {
  return ingress_.Add();
}
inline ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress* GameServer_Status_LoadBalancerStatus::add_ingress() {
  // @@protoc_insertion_point(field_add:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.ingress)
  return _internal_add_ingress();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress >&
GameServer_Status_LoadBalancerStatus::ingress() const {
  // @@protoc_insertion_point(field_list:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.ingress)
  return ingress_;
}

// -------------------------------------------------------------------

// GameServer_Status_GameServerCondition

// string type = 1;
inline void GameServer_Status_GameServerCondition::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GameServer_Status_GameServerCondition::type() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.GameServerCondition.type)
  return _internal_type();
}
inline void GameServer_Status_GameServerCondition::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Status.GameServerCondition.type)
}
inline std::string* GameServer_Status_GameServerCondition::mutable_type() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Status.GameServerCondition.type)
  return _internal_mutable_type();
}
inline const std::string& GameServer_Status_GameServerCondition::_internal_type() const {
  return type_.Get();
}
inline void GameServer_Status_GameServerCondition::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameServer_Status_GameServerCondition::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:carrier.dev.sdk.GameServer.Status.GameServerCondition.type)
}
inline void GameServer_Status_GameServerCondition::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:carrier.dev.sdk.GameServer.Status.GameServerCondition.type)
}
inline void GameServer_Status_GameServerCondition::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:carrier.dev.sdk.GameServer.Status.GameServerCondition.type)
}
inline std::string* GameServer_Status_GameServerCondition::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameServer_Status_GameServerCondition::release_type() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.Status.GameServerCondition.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_Status_GameServerCondition::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.Status.GameServerCondition.type)
}

// string status = 2;
inline void GameServer_Status_GameServerCondition::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GameServer_Status_GameServerCondition::status() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.GameServerCondition.status)
  return _internal_status();
}
inline void GameServer_Status_GameServerCondition::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Status.GameServerCondition.status)
}
inline std::string* GameServer_Status_GameServerCondition::mutable_status() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Status.GameServerCondition.status)
  return _internal_mutable_status();
}
inline const std::string& GameServer_Status_GameServerCondition::_internal_status() const {
  return status_.Get();
}
inline void GameServer_Status_GameServerCondition::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameServer_Status_GameServerCondition::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:carrier.dev.sdk.GameServer.Status.GameServerCondition.status)
}
inline void GameServer_Status_GameServerCondition::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:carrier.dev.sdk.GameServer.Status.GameServerCondition.status)
}
inline void GameServer_Status_GameServerCondition::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:carrier.dev.sdk.GameServer.Status.GameServerCondition.status)
}
inline std::string* GameServer_Status_GameServerCondition::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameServer_Status_GameServerCondition::release_status() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.Status.GameServerCondition.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_Status_GameServerCondition::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.Status.GameServerCondition.status)
}

// int64 last_probe_time = 3;
inline void GameServer_Status_GameServerCondition::clear_last_probe_time() {
  last_probe_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_Status_GameServerCondition::_internal_last_probe_time() const {
  return last_probe_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_Status_GameServerCondition::last_probe_time() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.GameServerCondition.last_probe_time)
  return _internal_last_probe_time();
}
inline void GameServer_Status_GameServerCondition::_internal_set_last_probe_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_probe_time_ = value;
}
inline void GameServer_Status_GameServerCondition::set_last_probe_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_probe_time(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Status.GameServerCondition.last_probe_time)
}

// int64 last_transition_time = 4;
inline void GameServer_Status_GameServerCondition::clear_last_transition_time() {
  last_transition_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_Status_GameServerCondition::_internal_last_transition_time() const {
  return last_transition_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServer_Status_GameServerCondition::last_transition_time() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.GameServerCondition.last_transition_time)
  return _internal_last_transition_time();
}
inline void GameServer_Status_GameServerCondition::_internal_set_last_transition_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_transition_time_ = value;
}
inline void GameServer_Status_GameServerCondition::set_last_transition_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_transition_time(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Status.GameServerCondition.last_transition_time)
}

// string message = 5;
inline void GameServer_Status_GameServerCondition::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GameServer_Status_GameServerCondition::message() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.GameServerCondition.message)
  return _internal_message();
}
inline void GameServer_Status_GameServerCondition::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Status.GameServerCondition.message)
}
inline std::string* GameServer_Status_GameServerCondition::mutable_message() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Status.GameServerCondition.message)
  return _internal_mutable_message();
}
inline const std::string& GameServer_Status_GameServerCondition::_internal_message() const {
  return message_.Get();
}
inline void GameServer_Status_GameServerCondition::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameServer_Status_GameServerCondition::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:carrier.dev.sdk.GameServer.Status.GameServerCondition.message)
}
inline void GameServer_Status_GameServerCondition::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:carrier.dev.sdk.GameServer.Status.GameServerCondition.message)
}
inline void GameServer_Status_GameServerCondition::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:carrier.dev.sdk.GameServer.Status.GameServerCondition.message)
}
inline std::string* GameServer_Status_GameServerCondition::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameServer_Status_GameServerCondition::release_message() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.Status.GameServerCondition.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_Status_GameServerCondition::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.Status.GameServerCondition.message)
}

// -------------------------------------------------------------------

// GameServer_Status

// string state = 1;
inline void GameServer_Status::clear_state() {
  state_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GameServer_Status::state() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.state)
  return _internal_state();
}
inline void GameServer_Status::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Status.state)
}
inline std::string* GameServer_Status::mutable_state() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Status.state)
  return _internal_mutable_state();
}
inline const std::string& GameServer_Status::_internal_state() const {
  return state_.Get();
}
inline void GameServer_Status::_internal_set_state(const std::string& value) {
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameServer_Status::set_state(std::string&& value) {
  
  state_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:carrier.dev.sdk.GameServer.Status.state)
}
inline void GameServer_Status::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:carrier.dev.sdk.GameServer.Status.state)
}
inline void GameServer_Status::set_state(const char* value,
    size_t size) {
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:carrier.dev.sdk.GameServer.Status.state)
}
inline std::string* GameServer_Status::_internal_mutable_state() {
  
  return state_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameServer_Status::release_state() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.Status.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_Status::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.Status.state)
}

// string address = 2;
inline void GameServer_Status::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GameServer_Status::address() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.address)
  return _internal_address();
}
inline void GameServer_Status::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Status.address)
}
inline std::string* GameServer_Status::mutable_address() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Status.address)
  return _internal_mutable_address();
}
inline const std::string& GameServer_Status::_internal_address() const {
  return address_.Get();
}
inline void GameServer_Status::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameServer_Status::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:carrier.dev.sdk.GameServer.Status.address)
}
inline void GameServer_Status::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:carrier.dev.sdk.GameServer.Status.address)
}
inline void GameServer_Status::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:carrier.dev.sdk.GameServer.Status.address)
}
inline std::string* GameServer_Status::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameServer_Status::release_address() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.Status.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_Status::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.Status.address)
}

// string nodeName = 3;
inline void GameServer_Status::clear_nodename() {
  nodename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GameServer_Status::nodename() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.nodeName)
  return _internal_nodename();
}
inline void GameServer_Status::set_nodename(const std::string& value) {
  _internal_set_nodename(value);
  // @@protoc_insertion_point(field_set:carrier.dev.sdk.GameServer.Status.nodeName)
}
inline std::string* GameServer_Status::mutable_nodename() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Status.nodeName)
  return _internal_mutable_nodename();
}
inline const std::string& GameServer_Status::_internal_nodename() const {
  return nodename_.Get();
}
inline void GameServer_Status::_internal_set_nodename(const std::string& value) {
  
  nodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameServer_Status::set_nodename(std::string&& value) {
  
  nodename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:carrier.dev.sdk.GameServer.Status.nodeName)
}
inline void GameServer_Status::set_nodename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:carrier.dev.sdk.GameServer.Status.nodeName)
}
inline void GameServer_Status::set_nodename(const char* value,
    size_t size) {
  
  nodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:carrier.dev.sdk.GameServer.Status.nodeName)
}
inline std::string* GameServer_Status::_internal_mutable_nodename() {
  
  return nodename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameServer_Status::release_nodename() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.Status.nodeName)
  return nodename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameServer_Status::set_allocated_nodename(std::string* nodename) {
  if (nodename != nullptr) {
    
  } else {
    
  }
  nodename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.Status.nodeName)
}

// .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus load_balancer_status = 4;
inline bool GameServer_Status::_internal_has_load_balancer_status() const {
  return this != internal_default_instance() && load_balancer_status_ != nullptr;
}
inline bool GameServer_Status::has_load_balancer_status() const {
  return _internal_has_load_balancer_status();
}
inline void GameServer_Status::clear_load_balancer_status() {
  if (GetArena() == nullptr && load_balancer_status_ != nullptr) {
    delete load_balancer_status_;
  }
  load_balancer_status_ = nullptr;
}
inline const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus& GameServer_Status::_internal_load_balancer_status() const {
  const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus* p = load_balancer_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus*>(
      &::carrier::dev::sdk::_GameServer_Status_LoadBalancerStatus_default_instance_);
}
inline const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus& GameServer_Status::load_balancer_status() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.load_balancer_status)
  return _internal_load_balancer_status();
}
inline void GameServer_Status::unsafe_arena_set_allocated_load_balancer_status(
    ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus* load_balancer_status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(load_balancer_status_);
  }
  load_balancer_status_ = load_balancer_status;
  if (load_balancer_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carrier.dev.sdk.GameServer.Status.load_balancer_status)
}
inline ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus* GameServer_Status::release_load_balancer_status() {
  
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus* temp = load_balancer_status_;
  load_balancer_status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus* GameServer_Status::unsafe_arena_release_load_balancer_status() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.Status.load_balancer_status)
  
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus* temp = load_balancer_status_;
  load_balancer_status_ = nullptr;
  return temp;
}
inline ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus* GameServer_Status::_internal_mutable_load_balancer_status() {
  
  if (load_balancer_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus>(GetArena());
    load_balancer_status_ = p;
  }
  return load_balancer_status_;
}
inline ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus* GameServer_Status::mutable_load_balancer_status() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Status.load_balancer_status)
  return _internal_mutable_load_balancer_status();
}
inline void GameServer_Status::set_allocated_load_balancer_status(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus* load_balancer_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete load_balancer_status_;
  }
  if (load_balancer_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(load_balancer_status);
    if (message_arena != submessage_arena) {
      load_balancer_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load_balancer_status, submessage_arena);
    }
    
  } else {
    
  }
  load_balancer_status_ = load_balancer_status;
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.Status.load_balancer_status)
}

// repeated .carrier.dev.sdk.GameServer.Status.GameServerCondition conditions = 5;
inline int GameServer_Status::_internal_conditions_size() const {
  return conditions_.size();
}
inline int GameServer_Status::conditions_size() const {
  return _internal_conditions_size();
}
inline void GameServer_Status::clear_conditions() {
  conditions_.Clear();
}
inline ::carrier::dev::sdk::GameServer_Status_GameServerCondition* GameServer_Status::mutable_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.Status.conditions)
  return conditions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Status_GameServerCondition >*
GameServer_Status::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:carrier.dev.sdk.GameServer.Status.conditions)
  return &conditions_;
}
inline const ::carrier::dev::sdk::GameServer_Status_GameServerCondition& GameServer_Status::_internal_conditions(int index) const {
  return conditions_.Get(index);
}
inline const ::carrier::dev::sdk::GameServer_Status_GameServerCondition& GameServer_Status::conditions(int index) const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.Status.conditions)
  return _internal_conditions(index);
}
inline ::carrier::dev::sdk::GameServer_Status_GameServerCondition* GameServer_Status::_internal_add_conditions() {
  return conditions_.Add();
}
inline ::carrier::dev::sdk::GameServer_Status_GameServerCondition* GameServer_Status::add_conditions() {
  // @@protoc_insertion_point(field_add:carrier.dev.sdk.GameServer.Status.conditions)
  return _internal_add_conditions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::carrier::dev::sdk::GameServer_Status_GameServerCondition >&
GameServer_Status::conditions() const {
  // @@protoc_insertion_point(field_list:carrier.dev.sdk.GameServer.Status.conditions)
  return conditions_;
}

// -------------------------------------------------------------------

// GameServer

// .carrier.dev.sdk.GameServer.ObjectMeta object_meta = 1;
inline bool GameServer::_internal_has_object_meta() const {
  return this != internal_default_instance() && object_meta_ != nullptr;
}
inline bool GameServer::has_object_meta() const {
  return _internal_has_object_meta();
}
inline void GameServer::clear_object_meta() {
  if (GetArena() == nullptr && object_meta_ != nullptr) {
    delete object_meta_;
  }
  object_meta_ = nullptr;
}
inline const ::carrier::dev::sdk::GameServer_ObjectMeta& GameServer::_internal_object_meta() const {
  const ::carrier::dev::sdk::GameServer_ObjectMeta* p = object_meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::carrier::dev::sdk::GameServer_ObjectMeta*>(
      &::carrier::dev::sdk::_GameServer_ObjectMeta_default_instance_);
}
inline const ::carrier::dev::sdk::GameServer_ObjectMeta& GameServer::object_meta() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.object_meta)
  return _internal_object_meta();
}
inline void GameServer::unsafe_arena_set_allocated_object_meta(
    ::carrier::dev::sdk::GameServer_ObjectMeta* object_meta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_meta_);
  }
  object_meta_ = object_meta;
  if (object_meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carrier.dev.sdk.GameServer.object_meta)
}
inline ::carrier::dev::sdk::GameServer_ObjectMeta* GameServer::release_object_meta() {
  
  ::carrier::dev::sdk::GameServer_ObjectMeta* temp = object_meta_;
  object_meta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::carrier::dev::sdk::GameServer_ObjectMeta* GameServer::unsafe_arena_release_object_meta() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.object_meta)
  
  ::carrier::dev::sdk::GameServer_ObjectMeta* temp = object_meta_;
  object_meta_ = nullptr;
  return temp;
}
inline ::carrier::dev::sdk::GameServer_ObjectMeta* GameServer::_internal_mutable_object_meta() {
  
  if (object_meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::carrier::dev::sdk::GameServer_ObjectMeta>(GetArena());
    object_meta_ = p;
  }
  return object_meta_;
}
inline ::carrier::dev::sdk::GameServer_ObjectMeta* GameServer::mutable_object_meta() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.object_meta)
  return _internal_mutable_object_meta();
}
inline void GameServer::set_allocated_object_meta(::carrier::dev::sdk::GameServer_ObjectMeta* object_meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete object_meta_;
  }
  if (object_meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object_meta);
    if (message_arena != submessage_arena) {
      object_meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_meta, submessage_arena);
    }
    
  } else {
    
  }
  object_meta_ = object_meta;
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.object_meta)
}

// .carrier.dev.sdk.GameServer.Spec spec = 2;
inline bool GameServer::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool GameServer::has_spec() const {
  return _internal_has_spec();
}
inline void GameServer::clear_spec() {
  if (GetArena() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::carrier::dev::sdk::GameServer_Spec& GameServer::_internal_spec() const {
  const ::carrier::dev::sdk::GameServer_Spec* p = spec_;
  return p != nullptr ? *p : *reinterpret_cast<const ::carrier::dev::sdk::GameServer_Spec*>(
      &::carrier::dev::sdk::_GameServer_Spec_default_instance_);
}
inline const ::carrier::dev::sdk::GameServer_Spec& GameServer::spec() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.spec)
  return _internal_spec();
}
inline void GameServer::unsafe_arena_set_allocated_spec(
    ::carrier::dev::sdk::GameServer_Spec* spec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carrier.dev.sdk.GameServer.spec)
}
inline ::carrier::dev::sdk::GameServer_Spec* GameServer::release_spec() {
  
  ::carrier::dev::sdk::GameServer_Spec* temp = spec_;
  spec_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::carrier::dev::sdk::GameServer_Spec* GameServer::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.spec)
  
  ::carrier::dev::sdk::GameServer_Spec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::carrier::dev::sdk::GameServer_Spec* GameServer::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::carrier::dev::sdk::GameServer_Spec>(GetArena());
    spec_ = p;
  }
  return spec_;
}
inline ::carrier::dev::sdk::GameServer_Spec* GameServer::mutable_spec() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.spec)
  return _internal_mutable_spec();
}
inline void GameServer::set_allocated_spec(::carrier::dev::sdk::GameServer_Spec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.spec)
}

// .carrier.dev.sdk.GameServer.Status status = 3;
inline bool GameServer::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GameServer::has_status() const {
  return _internal_has_status();
}
inline void GameServer::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::carrier::dev::sdk::GameServer_Status& GameServer::_internal_status() const {
  const ::carrier::dev::sdk::GameServer_Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::carrier::dev::sdk::GameServer_Status*>(
      &::carrier::dev::sdk::_GameServer_Status_default_instance_);
}
inline const ::carrier::dev::sdk::GameServer_Status& GameServer::status() const {
  // @@protoc_insertion_point(field_get:carrier.dev.sdk.GameServer.status)
  return _internal_status();
}
inline void GameServer::unsafe_arena_set_allocated_status(
    ::carrier::dev::sdk::GameServer_Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carrier.dev.sdk.GameServer.status)
}
inline ::carrier::dev::sdk::GameServer_Status* GameServer::release_status() {
  
  ::carrier::dev::sdk::GameServer_Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::carrier::dev::sdk::GameServer_Status* GameServer::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:carrier.dev.sdk.GameServer.status)
  
  ::carrier::dev::sdk::GameServer_Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::carrier::dev::sdk::GameServer_Status* GameServer::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::carrier::dev::sdk::GameServer_Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::carrier::dev::sdk::GameServer_Status* GameServer::mutable_status() {
  // @@protoc_insertion_point(field_mutable:carrier.dev.sdk.GameServer.status)
  return _internal_mutable_status();
}
inline void GameServer::set_allocated_status(::carrier::dev::sdk::GameServer_Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:carrier.dev.sdk.GameServer.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sdk
}  // namespace dev
}  // namespace carrier

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2eproto
