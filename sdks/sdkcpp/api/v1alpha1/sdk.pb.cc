// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk.proto

#include "sdk.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameServer_ObjectMeta_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameServer_ObjectMeta_AnnotationsEntry_DoNotUse_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameServer_ObjectMeta_LabelsEntry_DoNotUse_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameServer_Spec_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameServer_Spec_Constraint_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameServer_Status_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameServer_Status_GameServerCondition_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameServer_Status_LoadBalancerStatus_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange_sdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto;
namespace carrier {
namespace dev {
namespace sdk {
class EmptyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Empty> _instance;
} _Empty_default_instance_;
class BoolValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoolValue> _instance;
} _BoolValue_default_instance_;
class KeyValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyValue> _instance;
} _KeyValue_default_instance_;
class DurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Duration> _instance;
} _Duration_default_instance_;
class GameServer_ObjectMeta_AnnotationsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameServer_ObjectMeta_AnnotationsEntry_DoNotUse> _instance;
} _GameServer_ObjectMeta_AnnotationsEntry_DoNotUse_default_instance_;
class GameServer_ObjectMeta_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameServer_ObjectMeta_LabelsEntry_DoNotUse> _instance;
} _GameServer_ObjectMeta_LabelsEntry_DoNotUse_default_instance_;
class GameServer_ObjectMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameServer_ObjectMeta> _instance;
} _GameServer_ObjectMeta_default_instance_;
class GameServer_Spec_ConstraintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameServer_Spec_Constraint> _instance;
} _GameServer_Spec_Constraint_default_instance_;
class GameServer_SpecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameServer_Spec> _instance;
} _GameServer_Spec_default_instance_;
class GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange> _instance;
} _GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange_default_instance_;
class GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort> _instance;
} _GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_default_instance_;
class GameServer_Status_LoadBalancerStatus_LoadBalancerIngressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameServer_Status_LoadBalancerStatus_LoadBalancerIngress> _instance;
} _GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_default_instance_;
class GameServer_Status_LoadBalancerStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameServer_Status_LoadBalancerStatus> _instance;
} _GameServer_Status_LoadBalancerStatus_default_instance_;
class GameServer_Status_GameServerConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameServer_Status_GameServerCondition> _instance;
} _GameServer_Status_GameServerCondition_default_instance_;
class GameServer_StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameServer_Status> _instance;
} _GameServer_Status_default_instance_;
class GameServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameServer> _instance;
} _GameServer_default_instance_;
}  // namespace sdk
}  // namespace dev
}  // namespace carrier
static void InitDefaultsscc_info_BoolValue_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::carrier::dev::sdk::_BoolValue_default_instance_;
    new (ptr) ::carrier::dev::sdk::BoolValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::carrier::dev::sdk::BoolValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolValue_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BoolValue_sdk_2eproto}, {}};

static void InitDefaultsscc_info_Duration_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::carrier::dev::sdk::_Duration_default_instance_;
    new (ptr) ::carrier::dev::sdk::Duration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::carrier::dev::sdk::Duration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Duration_sdk_2eproto}, {}};

static void InitDefaultsscc_info_Empty_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::carrier::dev::sdk::_Empty_default_instance_;
    new (ptr) ::carrier::dev::sdk::Empty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::carrier::dev::sdk::Empty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Empty_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Empty_sdk_2eproto}, {}};

static void InitDefaultsscc_info_GameServer_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::carrier::dev::sdk::_GameServer_default_instance_;
    new (ptr) ::carrier::dev::sdk::GameServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::carrier::dev::sdk::GameServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GameServer_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GameServer_sdk_2eproto}, {
      &scc_info_GameServer_ObjectMeta_sdk_2eproto.base,
      &scc_info_GameServer_Spec_sdk_2eproto.base,
      &scc_info_GameServer_Status_sdk_2eproto.base,}};

static void InitDefaultsscc_info_GameServer_ObjectMeta_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::carrier::dev::sdk::_GameServer_ObjectMeta_default_instance_;
    new (ptr) ::carrier::dev::sdk::GameServer_ObjectMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::carrier::dev::sdk::GameServer_ObjectMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameServer_ObjectMeta_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GameServer_ObjectMeta_sdk_2eproto}, {
      &scc_info_GameServer_ObjectMeta_AnnotationsEntry_DoNotUse_sdk_2eproto.base,
      &scc_info_GameServer_ObjectMeta_LabelsEntry_DoNotUse_sdk_2eproto.base,}};

static void InitDefaultsscc_info_GameServer_ObjectMeta_AnnotationsEntry_DoNotUse_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::carrier::dev::sdk::_GameServer_ObjectMeta_AnnotationsEntry_DoNotUse_default_instance_;
    new (ptr) ::carrier::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse();
  }
  ::carrier::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameServer_ObjectMeta_AnnotationsEntry_DoNotUse_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameServer_ObjectMeta_AnnotationsEntry_DoNotUse_sdk_2eproto}, {}};

static void InitDefaultsscc_info_GameServer_ObjectMeta_LabelsEntry_DoNotUse_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::carrier::dev::sdk::_GameServer_ObjectMeta_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::carrier::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse();
  }
  ::carrier::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameServer_ObjectMeta_LabelsEntry_DoNotUse_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameServer_ObjectMeta_LabelsEntry_DoNotUse_sdk_2eproto}, {}};

static void InitDefaultsscc_info_GameServer_Spec_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::carrier::dev::sdk::_GameServer_Spec_default_instance_;
    new (ptr) ::carrier::dev::sdk::GameServer_Spec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::carrier::dev::sdk::GameServer_Spec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameServer_Spec_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameServer_Spec_sdk_2eproto}, {
      &scc_info_GameServer_Spec_Constraint_sdk_2eproto.base,}};

static void InitDefaultsscc_info_GameServer_Spec_Constraint_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::carrier::dev::sdk::_GameServer_Spec_Constraint_default_instance_;
    new (ptr) ::carrier::dev::sdk::GameServer_Spec_Constraint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::carrier::dev::sdk::GameServer_Spec_Constraint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameServer_Spec_Constraint_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameServer_Spec_Constraint_sdk_2eproto}, {}};

static void InitDefaultsscc_info_GameServer_Status_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::carrier::dev::sdk::_GameServer_Status_default_instance_;
    new (ptr) ::carrier::dev::sdk::GameServer_Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::carrier::dev::sdk::GameServer_Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameServer_Status_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GameServer_Status_sdk_2eproto}, {
      &scc_info_GameServer_Status_LoadBalancerStatus_sdk_2eproto.base,
      &scc_info_GameServer_Status_GameServerCondition_sdk_2eproto.base,}};

static void InitDefaultsscc_info_GameServer_Status_GameServerCondition_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::carrier::dev::sdk::_GameServer_Status_GameServerCondition_default_instance_;
    new (ptr) ::carrier::dev::sdk::GameServer_Status_GameServerCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::carrier::dev::sdk::GameServer_Status_GameServerCondition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameServer_Status_GameServerCondition_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameServer_Status_GameServerCondition_sdk_2eproto}, {}};

static void InitDefaultsscc_info_GameServer_Status_LoadBalancerStatus_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::carrier::dev::sdk::_GameServer_Status_LoadBalancerStatus_default_instance_;
    new (ptr) ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameServer_Status_LoadBalancerStatus_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameServer_Status_LoadBalancerStatus_sdk_2eproto}, {
      &scc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_sdk_2eproto.base,}};

static void InitDefaultsscc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::carrier::dev::sdk::_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_default_instance_;
    new (ptr) ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_sdk_2eproto}, {
      &scc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_sdk_2eproto.base,}};

static void InitDefaultsscc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::carrier::dev::sdk::_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_default_instance_;
    new (ptr) ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_sdk_2eproto}, {
      &scc_info_Int32Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange_sdk_2eproto.base,}};

static void InitDefaultsscc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::carrier::dev::sdk::_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange_default_instance_;
    new (ptr) ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange_sdk_2eproto}, {}};

static void InitDefaultsscc_info_KeyValue_sdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::carrier::dev::sdk::_KeyValue_default_instance_;
    new (ptr) ::carrier::dev::sdk::KeyValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::carrier::dev::sdk::KeyValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValue_sdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyValue_sdk_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sdk_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sdk_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sdk_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sdk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::BoolValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::BoolValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::KeyValue, key_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::KeyValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::Duration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::Duration, seconds_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_ObjectMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_ObjectMeta, name_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_ObjectMeta, namespace__),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_ObjectMeta, uid_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_ObjectMeta, resource_version_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_ObjectMeta, generation_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_ObjectMeta, creation_timestamp_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_ObjectMeta, deletion_timestamp_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_ObjectMeta, annotations_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_ObjectMeta, labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Spec_Constraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Spec_Constraint, type_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Spec_Constraint, effective_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Spec_Constraint, message_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Spec_Constraint, timeadded_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Spec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Spec, constraints_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Spec, readiness_gates_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Spec, deletable_gates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange, minport_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange, maxport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort, container_port_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort, external_port_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort, container_port_range_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort, external_port_range_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort, protocol_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress, ip_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress, ports_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus, ingress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_GameServerCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_GameServerCondition, type_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_GameServerCondition, status_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_GameServerCondition, last_probe_time_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_GameServerCondition, last_transition_time_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status_GameServerCondition, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status, state_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status, address_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status, nodename_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status, load_balancer_status_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer_Status, conditions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer, object_meta_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer, spec_),
  PROTOBUF_FIELD_OFFSET(::carrier::dev::sdk::GameServer, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::carrier::dev::sdk::Empty)},
  { 5, -1, sizeof(::carrier::dev::sdk::BoolValue)},
  { 11, -1, sizeof(::carrier::dev::sdk::KeyValue)},
  { 18, -1, sizeof(::carrier::dev::sdk::Duration)},
  { 24, 31, sizeof(::carrier::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse)},
  { 33, 40, sizeof(::carrier::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse)},
  { 42, -1, sizeof(::carrier::dev::sdk::GameServer_ObjectMeta)},
  { 56, -1, sizeof(::carrier::dev::sdk::GameServer_Spec_Constraint)},
  { 65, -1, sizeof(::carrier::dev::sdk::GameServer_Spec)},
  { 73, -1, sizeof(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange)},
  { 80, -1, sizeof(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort)},
  { 91, -1, sizeof(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress)},
  { 98, -1, sizeof(::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus)},
  { 104, -1, sizeof(::carrier::dev::sdk::GameServer_Status_GameServerCondition)},
  { 114, -1, sizeof(::carrier::dev::sdk::GameServer_Status)},
  { 124, -1, sizeof(::carrier::dev::sdk::GameServer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carrier::dev::sdk::_Empty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carrier::dev::sdk::_BoolValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carrier::dev::sdk::_KeyValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carrier::dev::sdk::_Duration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carrier::dev::sdk::_GameServer_ObjectMeta_AnnotationsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carrier::dev::sdk::_GameServer_ObjectMeta_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carrier::dev::sdk::_GameServer_ObjectMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carrier::dev::sdk::_GameServer_Spec_Constraint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carrier::dev::sdk::_GameServer_Spec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carrier::dev::sdk::_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carrier::dev::sdk::_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carrier::dev::sdk::_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carrier::dev::sdk::_GameServer_Status_LoadBalancerStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carrier::dev::sdk::_GameServer_Status_GameServerCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carrier::dev::sdk::_GameServer_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::carrier::dev::sdk::_GameServer_default_instance_),
};

const char descriptor_table_protodef_sdk_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tsdk.proto\022\017carrier.dev.sdk\032\034google/api"
  "/annotations.proto\032\036google/protobuf/wrap"
  "pers.proto\"\007\n\005Empty\"\032\n\tBoolValue\022\r\n\005valu"
  "e\030\001 \001(\010\"&\n\010KeyValue\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\t\"\033\n\010Duration\022\017\n\007seconds\030\001 \001(\003\"\310\016\n"
  "\nGameServer\022;\n\013object_meta\030\001 \001(\0132&.carri"
  "er.dev.sdk.GameServer.ObjectMeta\022.\n\004spec"
  "\030\002 \001(\0132 .carrier.dev.sdk.GameServer.Spec"
  "\0222\n\006status\030\003 \001(\0132\".carrier.dev.sdk.GameS"
  "erver.Status\032\225\003\n\nObjectMeta\022\014\n\004name\030\001 \001("
  "\t\022\021\n\tnamespace\030\002 \001(\t\022\013\n\003uid\030\003 \001(\t\022\030\n\020res"
  "ource_version\030\004 \001(\t\022\022\n\ngeneration\030\005 \001(\003\022"
  "\032\n\022creation_timestamp\030\006 \001(\003\022\032\n\022deletion_"
  "timestamp\030\007 \001(\003\022L\n\013annotations\030\010 \003(\01327.c"
  "arrier.dev.sdk.GameServer.ObjectMeta.Ann"
  "otationsEntry\022B\n\006labels\030\t \003(\01322.carrier."
  "dev.sdk.GameServer.ObjectMeta.LabelsEntr"
  "y\0322\n\020AnnotationsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\t:\0028\001\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\t:\0028\001\032\315\001\n\004Spec\022@\n\013constra"
  "ints\030\001 \003(\0132+.carrier.dev.sdk.GameServer."
  "Spec.Constraint\022\027\n\017readiness_gates\030\002 \003(\t"
  "\022\027\n\017deletable_gates\030\003 \003(\t\032Q\n\nConstraint\022"
  "\014\n\004type\030\001 \001(\t\022\021\n\teffective\030\002 \001(\010\022\017\n\007mess"
  "age\030\003 \001(\t\022\021\n\ttimeAdded\030\004 \001(\003\032\260\010\n\006Status\022"
  "\r\n\005state\030\001 \001(\t\022\017\n\007address\030\002 \001(\t\022\020\n\010nodeN"
  "ame\030\003 \001(\t\022S\n\024load_balancer_status\030\004 \001(\0132"
  "5.carrier.dev.sdk.GameServer.Status.Load"
  "BalancerStatus\022J\n\nconditions\030\005 \003(\01326.car"
  "rier.dev.sdk.GameServer.Status.GameServe"
  "rCondition\032\325\005\n\022LoadBalancerStatus\022Z\n\007ing"
  "ress\030\001 \003(\0132I.carrier.dev.sdk.GameServer."
  "Status.LoadBalancerStatus.LoadBalancerIn"
  "gress\032\342\004\n\023LoadBalancerIngress\022\n\n\002ip\030\001 \001("
  "\t\022i\n\005ports\030\002 \003(\0132Z.carrier.dev.sdk.GameS"
  "erver.Status.LoadBalancerStatus.LoadBala"
  "ncerIngress.LoadBalancerPort\032\323\003\n\020LoadBal"
  "ancerPort\0223\n\016container_port\030\001 \001(\0132\033.goog"
  "le.protobuf.Int32Value\0222\n\rexternal_port\030"
  "\002 \001(\0132\033.google.protobuf.Int32Value\022\202\001\n\024c"
  "ontainer_port_range\030\003 \001(\0132d.carrier.dev."
  "sdk.GameServer.Status.LoadBalancerStatus"
  ".LoadBalancerIngress.LoadBalancerPort.Po"
  "rtRange\022\201\001\n\023external_port_range\030\004 \001(\0132d."
  "carrier.dev.sdk.GameServer.Status.LoadBa"
  "lancerStatus.LoadBalancerIngress.LoadBal"
  "ancerPort.PortRange\022\020\n\010protocol\030\005 \001(\t\022\014\n"
  "\004name\030\006 \001(\t\032-\n\tPortRange\022\017\n\007minPort\030\001 \001("
  "\005\022\017\n\007maxPort\030\002 \001(\005\032{\n\023GameServerConditio"
  "n\022\014\n\004type\030\001 \001(\t\022\016\n\006status\030\002 \001(\t\022\027\n\017last_"
  "probe_time\030\003 \001(\003\022\034\n\024last_transition_time"
  "\030\004 \001(\003\022\017\n\007message\030\005 \001(\t2\337\003\n\003SDK\022Y\n\rGetGa"
  "meServer\022\026.carrier.dev.sdk.Empty\032\033.carri"
  "er.dev.sdk.GameServer\"\023\202\323\344\223\002\r\022\013/gameserv"
  "er\022c\n\017WatchGameServer\022\026.carrier.dev.sdk."
  "Empty\032\033.carrier.dev.sdk.GameServer\"\031\202\323\344\223"
  "\002\023\022\021/watch/gameserver0\001\022Y\n\010SetLabel\022\031.ca"
  "rrier.dev.sdk.KeyValue\032\026.carrier.dev.sdk"
  ".Empty\"\032\202\323\344\223\002\024\032\017/metadata/label:\001*\022c\n\rSe"
  "tAnnotation\022\031.carrier.dev.sdk.KeyValue\032\026"
  ".carrier.dev.sdk.Empty\"\037\202\323\344\223\002\031\032\024/metadat"
  "a/annotation:\001*\022X\n\014SetCondition\022\031.carrie"
  "r.dev.sdk.KeyValue\032\026.carrier.dev.sdk.Emp"
  "ty\"\025\202\323\344\223\002\017\032\n/condition:\001*B\007Z\005.;apib\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sdk_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sdk_2eproto_sccs[16] = {
  &scc_info_BoolValue_sdk_2eproto.base,
  &scc_info_Duration_sdk_2eproto.base,
  &scc_info_Empty_sdk_2eproto.base,
  &scc_info_GameServer_sdk_2eproto.base,
  &scc_info_GameServer_ObjectMeta_sdk_2eproto.base,
  &scc_info_GameServer_ObjectMeta_AnnotationsEntry_DoNotUse_sdk_2eproto.base,
  &scc_info_GameServer_ObjectMeta_LabelsEntry_DoNotUse_sdk_2eproto.base,
  &scc_info_GameServer_Spec_sdk_2eproto.base,
  &scc_info_GameServer_Spec_Constraint_sdk_2eproto.base,
  &scc_info_GameServer_Status_sdk_2eproto.base,
  &scc_info_GameServer_Status_GameServerCondition_sdk_2eproto.base,
  &scc_info_GameServer_Status_LoadBalancerStatus_sdk_2eproto.base,
  &scc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_sdk_2eproto.base,
  &scc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_sdk_2eproto.base,
  &scc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange_sdk_2eproto.base,
  &scc_info_KeyValue_sdk_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sdk_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2eproto = {
  false, false, descriptor_table_protodef_sdk_2eproto, "sdk.proto", 2562,
  &descriptor_table_sdk_2eproto_once, descriptor_table_sdk_2eproto_sccs, descriptor_table_sdk_2eproto_deps, 16, 2,
  schemas, file_default_instances, TableStruct_sdk_2eproto::offsets,
  file_level_metadata_sdk_2eproto, 16, file_level_enum_descriptors_sdk_2eproto, file_level_service_descriptors_sdk_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sdk_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sdk_2eproto)), true);
namespace carrier {
namespace dev {
namespace sdk {

// ===================================================================

void Empty::InitAsDefaultInstance() {
}
class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carrier.dev.sdk.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:carrier.dev.sdk.Empty)
}

void Empty::SharedCtor() {
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:carrier.dev.sdk.Empty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Empty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Empty::ArenaDtor(void* object) {
  Empty* _this = reinterpret_cast< Empty* >(object);
  (void)_this;
}
void Empty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Empty& Empty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Empty_sdk_2eproto.base);
  return *internal_default_instance();
}


void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:carrier.dev.sdk.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Empty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Empty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carrier.dev.sdk.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carrier.dev.sdk.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carrier.dev.sdk.Empty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carrier.dev.sdk.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Empty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carrier.dev.sdk.Empty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carrier.dev.sdk.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carrier.dev.sdk.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Empty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carrier.dev.sdk.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carrier.dev.sdk.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::InternalSwap(Empty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoolValue::InitAsDefaultInstance() {
}
class BoolValue::_Internal {
 public:
};

BoolValue::BoolValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carrier.dev.sdk.BoolValue)
}
BoolValue::BoolValue(const BoolValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:carrier.dev.sdk.BoolValue)
}

void BoolValue::SharedCtor() {
  value_ = false;
}

BoolValue::~BoolValue() {
  // @@protoc_insertion_point(destructor:carrier.dev.sdk.BoolValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoolValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BoolValue::ArenaDtor(void* object) {
  BoolValue* _this = reinterpret_cast< BoolValue* >(object);
  (void)_this;
}
void BoolValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoolValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoolValue& BoolValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoolValue_sdk_2eproto.base);
  return *internal_default_instance();
}


void BoolValue::Clear() {
// @@protoc_insertion_point(message_clear_start:carrier.dev.sdk.BoolValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoolValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoolValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carrier.dev.sdk.BoolValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carrier.dev.sdk.BoolValue)
  return target;
}

size_t BoolValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carrier.dev.sdk.BoolValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoolValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carrier.dev.sdk.BoolValue)
  GOOGLE_DCHECK_NE(&from, this);
  const BoolValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoolValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carrier.dev.sdk.BoolValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carrier.dev.sdk.BoolValue)
    MergeFrom(*source);
  }
}

void BoolValue::MergeFrom(const BoolValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carrier.dev.sdk.BoolValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void BoolValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carrier.dev.sdk.BoolValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolValue::CopyFrom(const BoolValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carrier.dev.sdk.BoolValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolValue::IsInitialized() const {
  return true;
}

void BoolValue::InternalSwap(BoolValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoolValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyValue::InitAsDefaultInstance() {
}
class KeyValue::_Internal {
 public:
};

KeyValue::KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carrier.dev.sdk.KeyValue)
}
KeyValue::KeyValue(const KeyValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:carrier.dev.sdk.KeyValue)
}

void KeyValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyValue_sdk_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:carrier.dev.sdk.KeyValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyValue::ArenaDtor(void* object) {
  KeyValue* _this = reinterpret_cast< KeyValue* >(object);
  (void)_this;
}
void KeyValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyValue& KeyValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyValue_sdk_2eproto.base);
  return *internal_default_instance();
}


void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:carrier.dev.sdk.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "carrier.dev.sdk.KeyValue.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "carrier.dev.sdk.KeyValue.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carrier.dev.sdk.KeyValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "carrier.dev.sdk.KeyValue.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "carrier.dev.sdk.KeyValue.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carrier.dev.sdk.KeyValue)
  return target;
}

size_t KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carrier.dev.sdk.KeyValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carrier.dev.sdk.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carrier.dev.sdk.KeyValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carrier.dev.sdk.KeyValue)
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carrier.dev.sdk.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void KeyValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carrier.dev.sdk.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carrier.dev.sdk.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  return true;
}

void KeyValue::InternalSwap(KeyValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Duration::InitAsDefaultInstance() {
}
class Duration::_Internal {
 public:
};

Duration::Duration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carrier.dev.sdk.Duration)
}
Duration::Duration(const Duration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seconds_ = from.seconds_;
  // @@protoc_insertion_point(copy_constructor:carrier.dev.sdk.Duration)
}

void Duration::SharedCtor() {
  seconds_ = PROTOBUF_LONGLONG(0);
}

Duration::~Duration() {
  // @@protoc_insertion_point(destructor:carrier.dev.sdk.Duration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Duration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Duration::ArenaDtor(void* object) {
  Duration* _this = reinterpret_cast< Duration* >(object);
  (void)_this;
}
void Duration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Duration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Duration& Duration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Duration_sdk_2eproto.base);
  return *internal_default_instance();
}


void Duration::Clear() {
// @@protoc_insertion_point(message_clear_start:carrier.dev.sdk.Duration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seconds_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Duration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Duration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carrier.dev.sdk.Duration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 seconds = 1;
  if (this->seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carrier.dev.sdk.Duration)
  return target;
}

size_t Duration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carrier.dev.sdk.Duration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 seconds = 1;
  if (this->seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Duration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carrier.dev.sdk.Duration)
  GOOGLE_DCHECK_NE(&from, this);
  const Duration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Duration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carrier.dev.sdk.Duration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carrier.dev.sdk.Duration)
    MergeFrom(*source);
  }
}

void Duration::MergeFrom(const Duration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carrier.dev.sdk.Duration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seconds() != 0) {
    _internal_set_seconds(from._internal_seconds());
  }
}

void Duration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carrier.dev.sdk.Duration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duration::CopyFrom(const Duration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carrier.dev.sdk.Duration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duration::IsInitialized() const {
  return true;
}

void Duration::InternalSwap(Duration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(seconds_, other->seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Duration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GameServer_ObjectMeta_AnnotationsEntry_DoNotUse::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse() {}
GameServer_ObjectMeta_AnnotationsEntry_DoNotUse::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GameServer_ObjectMeta_AnnotationsEntry_DoNotUse::MergeFrom(const GameServer_ObjectMeta_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GameServer_ObjectMeta_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GameServer_ObjectMeta_AnnotationsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

GameServer_ObjectMeta_LabelsEntry_DoNotUse::GameServer_ObjectMeta_LabelsEntry_DoNotUse() {}
GameServer_ObjectMeta_LabelsEntry_DoNotUse::GameServer_ObjectMeta_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GameServer_ObjectMeta_LabelsEntry_DoNotUse::MergeFrom(const GameServer_ObjectMeta_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GameServer_ObjectMeta_LabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GameServer_ObjectMeta_LabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GameServer_ObjectMeta::InitAsDefaultInstance() {
}
class GameServer_ObjectMeta::_Internal {
 public:
};

GameServer_ObjectMeta::GameServer_ObjectMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  annotations_(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carrier.dev.sdk.GameServer.ObjectMeta)
}
GameServer_ObjectMeta::GameServer_ObjectMeta(const GameServer_ObjectMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  annotations_.MergeFrom(from.annotations_);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uid().empty()) {
    uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uid(),
      GetArena());
  }
  resource_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource_version().empty()) {
    resource_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resource_version(),
      GetArena());
  }
  ::memcpy(&generation_, &from.generation_,
    static_cast<size_t>(reinterpret_cast<char*>(&deletion_timestamp_) -
    reinterpret_cast<char*>(&generation_)) + sizeof(deletion_timestamp_));
  // @@protoc_insertion_point(copy_constructor:carrier.dev.sdk.GameServer.ObjectMeta)
}

void GameServer_ObjectMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameServer_ObjectMeta_sdk_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&generation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deletion_timestamp_) -
      reinterpret_cast<char*>(&generation_)) + sizeof(deletion_timestamp_));
}

GameServer_ObjectMeta::~GameServer_ObjectMeta() {
  // @@protoc_insertion_point(destructor:carrier.dev.sdk.GameServer.ObjectMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServer_ObjectMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameServer_ObjectMeta::ArenaDtor(void* object) {
  GameServer_ObjectMeta* _this = reinterpret_cast< GameServer_ObjectMeta* >(object);
  (void)_this;
}
void GameServer_ObjectMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServer_ObjectMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameServer_ObjectMeta& GameServer_ObjectMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameServer_ObjectMeta_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameServer_ObjectMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:carrier.dev.sdk.GameServer.ObjectMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  annotations_.Clear();
  labels_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resource_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&generation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deletion_timestamp_) -
      reinterpret_cast<char*>(&generation_)) + sizeof(deletion_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServer_ObjectMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "carrier.dev.sdk.GameServer.ObjectMeta.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "carrier.dev.sdk.GameServer.ObjectMeta.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "carrier.dev.sdk.GameServer.ObjectMeta.uid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resource_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_resource_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "carrier.dev.sdk.GameServer.ObjectMeta.resource_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 generation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          generation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 creation_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          creation_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 deletion_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          deletion_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> annotations = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&annotations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServer_ObjectMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carrier.dev.sdk.GameServer.ObjectMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "carrier.dev.sdk.GameServer.ObjectMeta.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "carrier.dev.sdk.GameServer.ObjectMeta.namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_(), target);
  }

  // string uid = 3;
  if (this->uid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "carrier.dev.sdk.GameServer.ObjectMeta.uid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_uid(), target);
  }

  // string resource_version = 4;
  if (this->resource_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_version().data(), static_cast<int>(this->_internal_resource_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "carrier.dev.sdk.GameServer.ObjectMeta.resource_version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_resource_version(), target);
  }

  // int64 generation = 5;
  if (this->generation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_generation(), target);
  }

  // int64 creation_timestamp = 6;
  if (this->creation_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_creation_timestamp(), target);
  }

  // int64 deletion_timestamp = 7;
  if (this->deletion_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_deletion_timestamp(), target);
  }

  // map<string, string> annotations = 8;
  if (!this->_internal_annotations().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "carrier.dev.sdk.GameServer.ObjectMeta.AnnotationsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "carrier.dev.sdk.GameServer.ObjectMeta.AnnotationsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_annotations().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_annotations().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GameServer_ObjectMeta_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(8, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_annotations().begin();
          it != this->_internal_annotations().end(); ++it) {
        target = GameServer_ObjectMeta_AnnotationsEntry_DoNotUse::Funcs::InternalSerialize(8, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> labels = 9;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "carrier.dev.sdk.GameServer.ObjectMeta.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "carrier.dev.sdk.GameServer.ObjectMeta.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GameServer_ObjectMeta_LabelsEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = GameServer_ObjectMeta_LabelsEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carrier.dev.sdk.GameServer.ObjectMeta)
  return target;
}

size_t GameServer_ObjectMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carrier.dev.sdk.GameServer.ObjectMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> annotations = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_annotations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_annotations().begin();
      it != this->_internal_annotations().end(); ++it) {
    total_size += GameServer_ObjectMeta_AnnotationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> labels = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += GameServer_ObjectMeta_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string uid = 3;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string resource_version = 4;
  if (this->resource_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_version());
  }

  // int64 generation = 5;
  if (this->generation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_generation());
  }

  // int64 creation_timestamp = 6;
  if (this->creation_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_creation_timestamp());
  }

  // int64 deletion_timestamp = 7;
  if (this->deletion_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_deletion_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServer_ObjectMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carrier.dev.sdk.GameServer.ObjectMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServer_ObjectMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServer_ObjectMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carrier.dev.sdk.GameServer.ObjectMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carrier.dev.sdk.GameServer.ObjectMeta)
    MergeFrom(*source);
  }
}

void GameServer_ObjectMeta::MergeFrom(const GameServer_ObjectMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carrier.dev.sdk.GameServer.ObjectMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  annotations_.MergeFrom(from.annotations_);
  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.namespace_().size() > 0) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from.uid().size() > 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.resource_version().size() > 0) {
    _internal_set_resource_version(from._internal_resource_version());
  }
  if (from.generation() != 0) {
    _internal_set_generation(from._internal_generation());
  }
  if (from.creation_timestamp() != 0) {
    _internal_set_creation_timestamp(from._internal_creation_timestamp());
  }
  if (from.deletion_timestamp() != 0) {
    _internal_set_deletion_timestamp(from._internal_deletion_timestamp());
  }
}

void GameServer_ObjectMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carrier.dev.sdk.GameServer.ObjectMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServer_ObjectMeta::CopyFrom(const GameServer_ObjectMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carrier.dev.sdk.GameServer.ObjectMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServer_ObjectMeta::IsInitialized() const {
  return true;
}

void GameServer_ObjectMeta::InternalSwap(GameServer_ObjectMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  annotations_.Swap(&other->annotations_);
  labels_.Swap(&other->labels_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uid_.Swap(&other->uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resource_version_.Swap(&other->resource_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServer_ObjectMeta, deletion_timestamp_)
      + sizeof(GameServer_ObjectMeta::deletion_timestamp_)
      - PROTOBUF_FIELD_OFFSET(GameServer_ObjectMeta, generation_)>(
          reinterpret_cast<char*>(&generation_),
          reinterpret_cast<char*>(&other->generation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServer_ObjectMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameServer_Spec_Constraint::InitAsDefaultInstance() {
}
class GameServer_Spec_Constraint::_Internal {
 public:
};

GameServer_Spec_Constraint::GameServer_Spec_Constraint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carrier.dev.sdk.GameServer.Spec.Constraint)
}
GameServer_Spec_Constraint::GameServer_Spec_Constraint(const GameServer_Spec_Constraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  ::memcpy(&timeadded_, &from.timeadded_,
    static_cast<size_t>(reinterpret_cast<char*>(&effective_) -
    reinterpret_cast<char*>(&timeadded_)) + sizeof(effective_));
  // @@protoc_insertion_point(copy_constructor:carrier.dev.sdk.GameServer.Spec.Constraint)
}

void GameServer_Spec_Constraint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameServer_Spec_Constraint_sdk_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeadded_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effective_) -
      reinterpret_cast<char*>(&timeadded_)) + sizeof(effective_));
}

GameServer_Spec_Constraint::~GameServer_Spec_Constraint() {
  // @@protoc_insertion_point(destructor:carrier.dev.sdk.GameServer.Spec.Constraint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServer_Spec_Constraint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameServer_Spec_Constraint::ArenaDtor(void* object) {
  GameServer_Spec_Constraint* _this = reinterpret_cast< GameServer_Spec_Constraint* >(object);
  (void)_this;
}
void GameServer_Spec_Constraint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServer_Spec_Constraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameServer_Spec_Constraint& GameServer_Spec_Constraint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameServer_Spec_Constraint_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameServer_Spec_Constraint::Clear() {
// @@protoc_insertion_point(message_clear_start:carrier.dev.sdk.GameServer.Spec.Constraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&timeadded_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effective_) -
      reinterpret_cast<char*>(&timeadded_)) + sizeof(effective_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServer_Spec_Constraint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "carrier.dev.sdk.GameServer.Spec.Constraint.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool effective = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          effective_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "carrier.dev.sdk.GameServer.Spec.Constraint.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timeAdded = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timeadded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServer_Spec_Constraint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carrier.dev.sdk.GameServer.Spec.Constraint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "carrier.dev.sdk.GameServer.Spec.Constraint.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // bool effective = 2;
  if (this->effective() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_effective(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "carrier.dev.sdk.GameServer.Spec.Constraint.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // int64 timeAdded = 4;
  if (this->timeadded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timeadded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carrier.dev.sdk.GameServer.Spec.Constraint)
  return target;
}

size_t GameServer_Spec_Constraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carrier.dev.sdk.GameServer.Spec.Constraint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int64 timeAdded = 4;
  if (this->timeadded() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timeadded());
  }

  // bool effective = 2;
  if (this->effective() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServer_Spec_Constraint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carrier.dev.sdk.GameServer.Spec.Constraint)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServer_Spec_Constraint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServer_Spec_Constraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carrier.dev.sdk.GameServer.Spec.Constraint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carrier.dev.sdk.GameServer.Spec.Constraint)
    MergeFrom(*source);
  }
}

void GameServer_Spec_Constraint::MergeFrom(const GameServer_Spec_Constraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carrier.dev.sdk.GameServer.Spec.Constraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.timeadded() != 0) {
    _internal_set_timeadded(from._internal_timeadded());
  }
  if (from.effective() != 0) {
    _internal_set_effective(from._internal_effective());
  }
}

void GameServer_Spec_Constraint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carrier.dev.sdk.GameServer.Spec.Constraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServer_Spec_Constraint::CopyFrom(const GameServer_Spec_Constraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carrier.dev.sdk.GameServer.Spec.Constraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServer_Spec_Constraint::IsInitialized() const {
  return true;
}

void GameServer_Spec_Constraint::InternalSwap(GameServer_Spec_Constraint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServer_Spec_Constraint, effective_)
      + sizeof(GameServer_Spec_Constraint::effective_)
      - PROTOBUF_FIELD_OFFSET(GameServer_Spec_Constraint, timeadded_)>(
          reinterpret_cast<char*>(&timeadded_),
          reinterpret_cast<char*>(&other->timeadded_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServer_Spec_Constraint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameServer_Spec::InitAsDefaultInstance() {
}
class GameServer_Spec::_Internal {
 public:
};

GameServer_Spec::GameServer_Spec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  constraints_(arena),
  readiness_gates_(arena),
  deletable_gates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carrier.dev.sdk.GameServer.Spec)
}
GameServer_Spec::GameServer_Spec(const GameServer_Spec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      constraints_(from.constraints_),
      readiness_gates_(from.readiness_gates_),
      deletable_gates_(from.deletable_gates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:carrier.dev.sdk.GameServer.Spec)
}

void GameServer_Spec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameServer_Spec_sdk_2eproto.base);
}

GameServer_Spec::~GameServer_Spec() {
  // @@protoc_insertion_point(destructor:carrier.dev.sdk.GameServer.Spec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServer_Spec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameServer_Spec::ArenaDtor(void* object) {
  GameServer_Spec* _this = reinterpret_cast< GameServer_Spec* >(object);
  (void)_this;
}
void GameServer_Spec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServer_Spec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameServer_Spec& GameServer_Spec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameServer_Spec_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameServer_Spec::Clear() {
// @@protoc_insertion_point(message_clear_start:carrier.dev.sdk.GameServer.Spec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constraints_.Clear();
  readiness_gates_.Clear();
  deletable_gates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServer_Spec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .carrier.dev.sdk.GameServer.Spec.Constraint constraints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_constraints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string readiness_gates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_readiness_gates();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "carrier.dev.sdk.GameServer.Spec.readiness_gates"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string deletable_gates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deletable_gates();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "carrier.dev.sdk.GameServer.Spec.deletable_gates"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServer_Spec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carrier.dev.sdk.GameServer.Spec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .carrier.dev.sdk.GameServer.Spec.Constraint constraints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_constraints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_constraints(i), target, stream);
  }

  // repeated string readiness_gates = 2;
  for (int i = 0, n = this->_internal_readiness_gates_size(); i < n; i++) {
    const auto& s = this->_internal_readiness_gates(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "carrier.dev.sdk.GameServer.Spec.readiness_gates");
    target = stream->WriteString(2, s, target);
  }

  // repeated string deletable_gates = 3;
  for (int i = 0, n = this->_internal_deletable_gates_size(); i < n; i++) {
    const auto& s = this->_internal_deletable_gates(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "carrier.dev.sdk.GameServer.Spec.deletable_gates");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carrier.dev.sdk.GameServer.Spec)
  return target;
}

size_t GameServer_Spec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carrier.dev.sdk.GameServer.Spec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .carrier.dev.sdk.GameServer.Spec.Constraint constraints = 1;
  total_size += 1UL * this->_internal_constraints_size();
  for (const auto& msg : this->constraints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string readiness_gates = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(readiness_gates_.size());
  for (int i = 0, n = readiness_gates_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      readiness_gates_.Get(i));
  }

  // repeated string deletable_gates = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(deletable_gates_.size());
  for (int i = 0, n = deletable_gates_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      deletable_gates_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServer_Spec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carrier.dev.sdk.GameServer.Spec)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServer_Spec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServer_Spec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carrier.dev.sdk.GameServer.Spec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carrier.dev.sdk.GameServer.Spec)
    MergeFrom(*source);
  }
}

void GameServer_Spec::MergeFrom(const GameServer_Spec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carrier.dev.sdk.GameServer.Spec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  constraints_.MergeFrom(from.constraints_);
  readiness_gates_.MergeFrom(from.readiness_gates_);
  deletable_gates_.MergeFrom(from.deletable_gates_);
}

void GameServer_Spec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carrier.dev.sdk.GameServer.Spec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServer_Spec::CopyFrom(const GameServer_Spec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carrier.dev.sdk.GameServer.Spec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServer_Spec::IsInitialized() const {
  return true;
}

void GameServer_Spec::InternalSwap(GameServer_Spec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  constraints_.InternalSwap(&other->constraints_);
  readiness_gates_.InternalSwap(&other->readiness_gates_);
  deletable_gates_.InternalSwap(&other->deletable_gates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServer_Spec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::InitAsDefaultInstance() {
}
class GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::_Internal {
 public:
};

GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange)
}
GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&minport_, &from.minport_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxport_) -
    reinterpret_cast<char*>(&minport_)) + sizeof(maxport_));
  // @@protoc_insertion_point(copy_constructor:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange)
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::SharedCtor() {
  ::memset(&minport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxport_) -
      reinterpret_cast<char*>(&minport_)) + sizeof(maxport_));
}

GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::~GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange() {
  // @@protoc_insertion_point(destructor:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::ArenaDtor(void* object) {
  GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* _this = reinterpret_cast< GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* >(object);
  (void)_this;
}
void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::Clear() {
// @@protoc_insertion_point(message_clear_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&minport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxport_) -
      reinterpret_cast<char*>(&minport_)) + sizeof(maxport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 minPort = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          minport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxPort = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 minPort = 1;
  if (this->minport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_minport(), target);
  }

  // int32 maxPort = 2;
  if (this->maxport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange)
  return target;
}

size_t GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 minPort = 1;
  if (this->minport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minport());
  }

  // int32 maxPort = 2;
  if (this->maxport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxport());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange)
    MergeFrom(*source);
  }
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::MergeFrom(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.minport() != 0) {
    _internal_set_minport(from._internal_minport());
  }
  if (from.maxport() != 0) {
    _internal_set_maxport(from._internal_maxport());
  }
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::CopyFrom(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::IsInitialized() const {
  return true;
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::InternalSwap(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange, maxport_)
      + sizeof(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::maxport_)
      - PROTOBUF_FIELD_OFFSET(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange, minport_)>(
          reinterpret_cast<char*>(&minport_),
          reinterpret_cast<char*>(&other->minport_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::InitAsDefaultInstance() {
  ::carrier::dev::sdk::_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_default_instance_._instance.get_mutable()->container_port_ = const_cast< PROTOBUF_NAMESPACE_ID::Int32Value*>(
      PROTOBUF_NAMESPACE_ID::Int32Value::internal_default_instance());
  ::carrier::dev::sdk::_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_default_instance_._instance.get_mutable()->external_port_ = const_cast< PROTOBUF_NAMESPACE_ID::Int32Value*>(
      PROTOBUF_NAMESPACE_ID::Int32Value::internal_default_instance());
  ::carrier::dev::sdk::_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_default_instance_._instance.get_mutable()->container_port_range_ = const_cast< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange*>(
      ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::internal_default_instance());
  ::carrier::dev::sdk::_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_default_instance_._instance.get_mutable()->external_port_range_ = const_cast< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange*>(
      ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::internal_default_instance());
}
class GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int32Value& container_port(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* msg);
  static const PROTOBUF_NAMESPACE_ID::Int32Value& external_port(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* msg);
  static const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& container_port_range(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* msg);
  static const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange& external_port_range(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* msg);
};

const PROTOBUF_NAMESPACE_ID::Int32Value&
GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_Internal::container_port(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* msg) {
  return *msg->container_port_;
}
const PROTOBUF_NAMESPACE_ID::Int32Value&
GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_Internal::external_port(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* msg) {
  return *msg->external_port_;
}
const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange&
GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_Internal::container_port_range(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* msg) {
  return *msg->container_port_range_;
}
const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange&
GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_Internal::external_port_range(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* msg) {
  return *msg->external_port_range_;
}
void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::clear_container_port() {
  if (GetArena() == nullptr && container_port_ != nullptr) {
    delete container_port_;
  }
  container_port_ = nullptr;
}
void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::clear_external_port() {
  if (GetArena() == nullptr && external_port_ != nullptr) {
    delete external_port_;
  }
  external_port_ = nullptr;
}
GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort)
}
GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol().empty()) {
    protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_protocol(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_container_port()) {
    container_port_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.container_port_);
  } else {
    container_port_ = nullptr;
  }
  if (from._internal_has_external_port()) {
    external_port_ = new PROTOBUF_NAMESPACE_ID::Int32Value(*from.external_port_);
  } else {
    external_port_ = nullptr;
  }
  if (from._internal_has_container_port_range()) {
    container_port_range_ = new ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange(*from.container_port_range_);
  } else {
    container_port_range_ = nullptr;
  }
  if (from._internal_has_external_port_range()) {
    external_port_range_ = new ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange(*from.external_port_range_);
  } else {
    external_port_range_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort)
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_sdk_2eproto.base);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&container_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&external_port_range_) -
      reinterpret_cast<char*>(&container_port_)) + sizeof(external_port_range_));
}

GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::~GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort() {
  // @@protoc_insertion_point(destructor:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete container_port_;
  if (this != internal_default_instance()) delete external_port_;
  if (this != internal_default_instance()) delete container_port_range_;
  if (this != internal_default_instance()) delete external_port_range_;
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::ArenaDtor(void* object) {
  GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* _this = reinterpret_cast< GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* >(object);
  (void)_this;
}
void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort& GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::Clear() {
// @@protoc_insertion_point(message_clear_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && container_port_ != nullptr) {
    delete container_port_;
  }
  container_port_ = nullptr;
  if (GetArena() == nullptr && external_port_ != nullptr) {
    delete external_port_;
  }
  external_port_ = nullptr;
  if (GetArena() == nullptr && container_port_range_ != nullptr) {
    delete container_port_range_;
  }
  container_port_range_ = nullptr;
  if (GetArena() == nullptr && external_port_range_ != nullptr) {
    delete external_port_range_;
  }
  external_port_range_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Int32Value container_port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_container_port(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value external_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_external_port(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange container_port_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_container_port_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange external_port_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_external_port_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string protocol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.protocol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int32Value container_port = 1;
  if (this->has_container_port()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::container_port(this), target, stream);
  }

  // .google.protobuf.Int32Value external_port = 2;
  if (this->has_external_port()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::external_port(this), target, stream);
  }

  // .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange container_port_range = 3;
  if (this->has_container_port_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::container_port_range(this), target, stream);
  }

  // .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange external_port_range = 4;
  if (this->has_external_port_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::external_port_range(this), target, stream);
  }

  // string protocol = 5;
  if (this->protocol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.protocol");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_protocol(), target);
  }

  // string name = 6;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort)
  return target;
}

size_t GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol = 5;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // string name = 6;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Int32Value container_port = 1;
  if (this->has_container_port()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_port_);
  }

  // .google.protobuf.Int32Value external_port = 2;
  if (this->has_external_port()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *external_port_);
  }

  // .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange container_port_range = 3;
  if (this->has_container_port_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_port_range_);
  }

  // .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort.PortRange external_port_range = 4;
  if (this->has_external_port_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *external_port_range_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort)
    MergeFrom(*source);
  }
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::MergeFrom(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol().size() > 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_container_port()) {
    _internal_mutable_container_port()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_container_port());
  }
  if (from.has_external_port()) {
    _internal_mutable_external_port()->PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_external_port());
  }
  if (from.has_container_port_range()) {
    _internal_mutable_container_port_range()->::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::MergeFrom(from._internal_container_port_range());
  }
  if (from.has_external_port_range()) {
    _internal_mutable_external_port_range()->::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange::MergeFrom(from._internal_external_port_range());
  }
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::CopyFrom(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::IsInitialized() const {
  return true;
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::InternalSwap(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  protocol_.Swap(&other->protocol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort, external_port_range_)
      + sizeof(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::external_port_range_)
      - PROTOBUF_FIELD_OFFSET(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort, container_port_)>(
          reinterpret_cast<char*>(&container_port_),
          reinterpret_cast<char*>(&other->container_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::InitAsDefaultInstance() {
}
class GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::_Internal {
 public:
};

GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ports_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress)
}
GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ports_(from.ports_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress)
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_sdk_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::~GameServer_Status_LoadBalancerStatus_LoadBalancerIngress() {
  // @@protoc_insertion_point(destructor:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::ArenaDtor(void* object) {
  GameServer_Status_LoadBalancerStatus_LoadBalancerIngress* _this = reinterpret_cast< GameServer_Status_LoadBalancerStatus_LoadBalancerIngress* >(object);
  (void)_this;
}
void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress& GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::Clear() {
// @@protoc_insertion_point(message_clear_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ports_.Clear();
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort ports = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // repeated .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort ports = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ports_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ports(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress)
  return target;
}

size_t GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress.LoadBalancerPort ports = 2;
  total_size += 1UL * this->_internal_ports_size();
  for (const auto& msg : this->ports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServer_Status_LoadBalancerStatus_LoadBalancerIngress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress)
    MergeFrom(*source);
  }
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::MergeFrom(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ports_.MergeFrom(from.ports_);
  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::CopyFrom(const GameServer_Status_LoadBalancerStatus_LoadBalancerIngress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::IsInitialized() const {
  return true;
}

void GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::InternalSwap(GameServer_Status_LoadBalancerStatus_LoadBalancerIngress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ports_.InternalSwap(&other->ports_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServer_Status_LoadBalancerStatus_LoadBalancerIngress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameServer_Status_LoadBalancerStatus::InitAsDefaultInstance() {
}
class GameServer_Status_LoadBalancerStatus::_Internal {
 public:
};

GameServer_Status_LoadBalancerStatus::GameServer_Status_LoadBalancerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ingress_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus)
}
GameServer_Status_LoadBalancerStatus::GameServer_Status_LoadBalancerStatus(const GameServer_Status_LoadBalancerStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ingress_(from.ingress_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus)
}

void GameServer_Status_LoadBalancerStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameServer_Status_LoadBalancerStatus_sdk_2eproto.base);
}

GameServer_Status_LoadBalancerStatus::~GameServer_Status_LoadBalancerStatus() {
  // @@protoc_insertion_point(destructor:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServer_Status_LoadBalancerStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameServer_Status_LoadBalancerStatus::ArenaDtor(void* object) {
  GameServer_Status_LoadBalancerStatus* _this = reinterpret_cast< GameServer_Status_LoadBalancerStatus* >(object);
  (void)_this;
}
void GameServer_Status_LoadBalancerStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServer_Status_LoadBalancerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameServer_Status_LoadBalancerStatus& GameServer_Status_LoadBalancerStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameServer_Status_LoadBalancerStatus_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameServer_Status_LoadBalancerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ingress_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServer_Status_LoadBalancerStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress ingress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ingress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServer_Status_LoadBalancerStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress ingress = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ingress_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ingress(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus)
  return target;
}

size_t GameServer_Status_LoadBalancerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus.LoadBalancerIngress ingress = 1;
  total_size += 1UL * this->_internal_ingress_size();
  for (const auto& msg : this->ingress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServer_Status_LoadBalancerStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServer_Status_LoadBalancerStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServer_Status_LoadBalancerStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus)
    MergeFrom(*source);
  }
}

void GameServer_Status_LoadBalancerStatus::MergeFrom(const GameServer_Status_LoadBalancerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ingress_.MergeFrom(from.ingress_);
}

void GameServer_Status_LoadBalancerStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServer_Status_LoadBalancerStatus::CopyFrom(const GameServer_Status_LoadBalancerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carrier.dev.sdk.GameServer.Status.LoadBalancerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServer_Status_LoadBalancerStatus::IsInitialized() const {
  return true;
}

void GameServer_Status_LoadBalancerStatus::InternalSwap(GameServer_Status_LoadBalancerStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ingress_.InternalSwap(&other->ingress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServer_Status_LoadBalancerStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameServer_Status_GameServerCondition::InitAsDefaultInstance() {
}
class GameServer_Status_GameServerCondition::_Internal {
 public:
};

GameServer_Status_GameServerCondition::GameServer_Status_GameServerCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carrier.dev.sdk.GameServer.Status.GameServerCondition)
}
GameServer_Status_GameServerCondition::GameServer_Status_GameServerCondition(const GameServer_Status_GameServerCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  ::memcpy(&last_probe_time_, &from.last_probe_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_transition_time_) -
    reinterpret_cast<char*>(&last_probe_time_)) + sizeof(last_transition_time_));
  // @@protoc_insertion_point(copy_constructor:carrier.dev.sdk.GameServer.Status.GameServerCondition)
}

void GameServer_Status_GameServerCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameServer_Status_GameServerCondition_sdk_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_probe_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_transition_time_) -
      reinterpret_cast<char*>(&last_probe_time_)) + sizeof(last_transition_time_));
}

GameServer_Status_GameServerCondition::~GameServer_Status_GameServerCondition() {
  // @@protoc_insertion_point(destructor:carrier.dev.sdk.GameServer.Status.GameServerCondition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServer_Status_GameServerCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameServer_Status_GameServerCondition::ArenaDtor(void* object) {
  GameServer_Status_GameServerCondition* _this = reinterpret_cast< GameServer_Status_GameServerCondition* >(object);
  (void)_this;
}
void GameServer_Status_GameServerCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServer_Status_GameServerCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameServer_Status_GameServerCondition& GameServer_Status_GameServerCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameServer_Status_GameServerCondition_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameServer_Status_GameServerCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:carrier.dev.sdk.GameServer.Status.GameServerCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&last_probe_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_transition_time_) -
      reinterpret_cast<char*>(&last_probe_time_)) + sizeof(last_transition_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServer_Status_GameServerCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "carrier.dev.sdk.GameServer.Status.GameServerCondition.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "carrier.dev.sdk.GameServer.Status.GameServerCondition.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_probe_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          last_probe_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_transition_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          last_transition_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "carrier.dev.sdk.GameServer.Status.GameServerCondition.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServer_Status_GameServerCondition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carrier.dev.sdk.GameServer.Status.GameServerCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "carrier.dev.sdk.GameServer.Status.GameServerCondition.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "carrier.dev.sdk.GameServer.Status.GameServerCondition.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  // int64 last_probe_time = 3;
  if (this->last_probe_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_last_probe_time(), target);
  }

  // int64 last_transition_time = 4;
  if (this->last_transition_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_last_transition_time(), target);
  }

  // string message = 5;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "carrier.dev.sdk.GameServer.Status.GameServerCondition.message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carrier.dev.sdk.GameServer.Status.GameServerCondition)
  return target;
}

size_t GameServer_Status_GameServerCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carrier.dev.sdk.GameServer.Status.GameServerCondition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string message = 5;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int64 last_probe_time = 3;
  if (this->last_probe_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_probe_time());
  }

  // int64 last_transition_time = 4;
  if (this->last_transition_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_transition_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServer_Status_GameServerCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carrier.dev.sdk.GameServer.Status.GameServerCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServer_Status_GameServerCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServer_Status_GameServerCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carrier.dev.sdk.GameServer.Status.GameServerCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carrier.dev.sdk.GameServer.Status.GameServerCondition)
    MergeFrom(*source);
  }
}

void GameServer_Status_GameServerCondition::MergeFrom(const GameServer_Status_GameServerCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carrier.dev.sdk.GameServer.Status.GameServerCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.last_probe_time() != 0) {
    _internal_set_last_probe_time(from._internal_last_probe_time());
  }
  if (from.last_transition_time() != 0) {
    _internal_set_last_transition_time(from._internal_last_transition_time());
  }
}

void GameServer_Status_GameServerCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carrier.dev.sdk.GameServer.Status.GameServerCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServer_Status_GameServerCondition::CopyFrom(const GameServer_Status_GameServerCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carrier.dev.sdk.GameServer.Status.GameServerCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServer_Status_GameServerCondition::IsInitialized() const {
  return true;
}

void GameServer_Status_GameServerCondition::InternalSwap(GameServer_Status_GameServerCondition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServer_Status_GameServerCondition, last_transition_time_)
      + sizeof(GameServer_Status_GameServerCondition::last_transition_time_)
      - PROTOBUF_FIELD_OFFSET(GameServer_Status_GameServerCondition, last_probe_time_)>(
          reinterpret_cast<char*>(&last_probe_time_),
          reinterpret_cast<char*>(&other->last_probe_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServer_Status_GameServerCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameServer_Status::InitAsDefaultInstance() {
  ::carrier::dev::sdk::_GameServer_Status_default_instance_._instance.get_mutable()->load_balancer_status_ = const_cast< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus*>(
      ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus::internal_default_instance());
}
class GameServer_Status::_Internal {
 public:
  static const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus& load_balancer_status(const GameServer_Status* msg);
};

const ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus&
GameServer_Status::_Internal::load_balancer_status(const GameServer_Status* msg) {
  return *msg->load_balancer_status_;
}
GameServer_Status::GameServer_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  conditions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carrier.dev.sdk.GameServer.Status)
}
GameServer_Status::GameServer_Status(const GameServer_Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      conditions_(from.conditions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state().empty()) {
    state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_state(),
      GetArena());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  nodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodename().empty()) {
    nodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nodename(),
      GetArena());
  }
  if (from._internal_has_load_balancer_status()) {
    load_balancer_status_ = new ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus(*from.load_balancer_status_);
  } else {
    load_balancer_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:carrier.dev.sdk.GameServer.Status)
}

void GameServer_Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameServer_Status_sdk_2eproto.base);
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  load_balancer_status_ = nullptr;
}

GameServer_Status::~GameServer_Status() {
  // @@protoc_insertion_point(destructor:carrier.dev.sdk.GameServer.Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServer_Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete load_balancer_status_;
}

void GameServer_Status::ArenaDtor(void* object) {
  GameServer_Status* _this = reinterpret_cast< GameServer_Status* >(object);
  (void)_this;
}
void GameServer_Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServer_Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameServer_Status& GameServer_Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameServer_Status_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameServer_Status::Clear() {
// @@protoc_insertion_point(message_clear_start:carrier.dev.sdk.GameServer.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conditions_.Clear();
  state_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nodename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && load_balancer_status_ != nullptr) {
    delete load_balancer_status_;
  }
  load_balancer_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServer_Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "carrier.dev.sdk.GameServer.Status.state"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "carrier.dev.sdk.GameServer.Status.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nodeName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nodename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "carrier.dev.sdk.GameServer.Status.nodeName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus load_balancer_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_load_balancer_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .carrier.dev.sdk.GameServer.Status.GameServerCondition conditions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conditions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServer_Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carrier.dev.sdk.GameServer.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string state = 1;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "carrier.dev.sdk.GameServer.Status.state");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_state(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "carrier.dev.sdk.GameServer.Status.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // string nodeName = 3;
  if (this->nodename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodename().data(), static_cast<int>(this->_internal_nodename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "carrier.dev.sdk.GameServer.Status.nodeName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nodename(), target);
  }

  // .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus load_balancer_status = 4;
  if (this->has_load_balancer_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::load_balancer_status(this), target, stream);
  }

  // repeated .carrier.dev.sdk.GameServer.Status.GameServerCondition conditions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conditions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_conditions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carrier.dev.sdk.GameServer.Status)
  return target;
}

size_t GameServer_Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carrier.dev.sdk.GameServer.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .carrier.dev.sdk.GameServer.Status.GameServerCondition conditions = 5;
  total_size += 1UL * this->_internal_conditions_size();
  for (const auto& msg : this->conditions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string state = 1;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string nodeName = 3;
  if (this->nodename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodename());
  }

  // .carrier.dev.sdk.GameServer.Status.LoadBalancerStatus load_balancer_status = 4;
  if (this->has_load_balancer_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *load_balancer_status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServer_Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carrier.dev.sdk.GameServer.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServer_Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServer_Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carrier.dev.sdk.GameServer.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carrier.dev.sdk.GameServer.Status)
    MergeFrom(*source);
  }
}

void GameServer_Status::MergeFrom(const GameServer_Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carrier.dev.sdk.GameServer.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conditions_.MergeFrom(from.conditions_);
  if (from.state().size() > 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.nodename().size() > 0) {
    _internal_set_nodename(from._internal_nodename());
  }
  if (from.has_load_balancer_status()) {
    _internal_mutable_load_balancer_status()->::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus::MergeFrom(from._internal_load_balancer_status());
  }
}

void GameServer_Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carrier.dev.sdk.GameServer.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServer_Status::CopyFrom(const GameServer_Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carrier.dev.sdk.GameServer.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServer_Status::IsInitialized() const {
  return true;
}

void GameServer_Status::InternalSwap(GameServer_Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  conditions_.InternalSwap(&other->conditions_);
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nodename_.Swap(&other->nodename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(load_balancer_status_, other->load_balancer_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServer_Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameServer::InitAsDefaultInstance() {
  ::carrier::dev::sdk::_GameServer_default_instance_._instance.get_mutable()->object_meta_ = const_cast< ::carrier::dev::sdk::GameServer_ObjectMeta*>(
      ::carrier::dev::sdk::GameServer_ObjectMeta::internal_default_instance());
  ::carrier::dev::sdk::_GameServer_default_instance_._instance.get_mutable()->spec_ = const_cast< ::carrier::dev::sdk::GameServer_Spec*>(
      ::carrier::dev::sdk::GameServer_Spec::internal_default_instance());
  ::carrier::dev::sdk::_GameServer_default_instance_._instance.get_mutable()->status_ = const_cast< ::carrier::dev::sdk::GameServer_Status*>(
      ::carrier::dev::sdk::GameServer_Status::internal_default_instance());
}
class GameServer::_Internal {
 public:
  static const ::carrier::dev::sdk::GameServer_ObjectMeta& object_meta(const GameServer* msg);
  static const ::carrier::dev::sdk::GameServer_Spec& spec(const GameServer* msg);
  static const ::carrier::dev::sdk::GameServer_Status& status(const GameServer* msg);
};

const ::carrier::dev::sdk::GameServer_ObjectMeta&
GameServer::_Internal::object_meta(const GameServer* msg) {
  return *msg->object_meta_;
}
const ::carrier::dev::sdk::GameServer_Spec&
GameServer::_Internal::spec(const GameServer* msg) {
  return *msg->spec_;
}
const ::carrier::dev::sdk::GameServer_Status&
GameServer::_Internal::status(const GameServer* msg) {
  return *msg->status_;
}
GameServer::GameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carrier.dev.sdk.GameServer)
}
GameServer::GameServer(const GameServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object_meta()) {
    object_meta_ = new ::carrier::dev::sdk::GameServer_ObjectMeta(*from.object_meta_);
  } else {
    object_meta_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::carrier::dev::sdk::GameServer_Spec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::carrier::dev::sdk::GameServer_Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:carrier.dev.sdk.GameServer)
}

void GameServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameServer_sdk_2eproto.base);
  ::memset(&object_meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&object_meta_)) + sizeof(status_));
}

GameServer::~GameServer() {
  // @@protoc_insertion_point(destructor:carrier.dev.sdk.GameServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete object_meta_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void GameServer::ArenaDtor(void* object) {
  GameServer* _this = reinterpret_cast< GameServer* >(object);
  (void)_this;
}
void GameServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameServer& GameServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameServer_sdk_2eproto.base);
  return *internal_default_instance();
}


void GameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:carrier.dev.sdk.GameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && object_meta_ != nullptr) {
    delete object_meta_;
  }
  object_meta_ = nullptr;
  if (GetArena() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .carrier.dev.sdk.GameServer.ObjectMeta object_meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .carrier.dev.sdk.GameServer.Spec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .carrier.dev.sdk.GameServer.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:carrier.dev.sdk.GameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carrier.dev.sdk.GameServer.ObjectMeta object_meta = 1;
  if (this->has_object_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object_meta(this), target, stream);
  }

  // .carrier.dev.sdk.GameServer.Spec spec = 2;
  if (this->has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // .carrier.dev.sdk.GameServer.Status status = 3;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:carrier.dev.sdk.GameServer)
  return target;
}

size_t GameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carrier.dev.sdk.GameServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .carrier.dev.sdk.GameServer.ObjectMeta object_meta = 1;
  if (this->has_object_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_meta_);
  }

  // .carrier.dev.sdk.GameServer.Spec spec = 2;
  if (this->has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .carrier.dev.sdk.GameServer.Status status = 3;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carrier.dev.sdk.GameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carrier.dev.sdk.GameServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carrier.dev.sdk.GameServer)
    MergeFrom(*source);
  }
}

void GameServer::MergeFrom(const GameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carrier.dev.sdk.GameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object_meta()) {
    _internal_mutable_object_meta()->::carrier::dev::sdk::GameServer_ObjectMeta::MergeFrom(from._internal_object_meta());
  }
  if (from.has_spec()) {
    _internal_mutable_spec()->::carrier::dev::sdk::GameServer_Spec::MergeFrom(from._internal_spec());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::carrier::dev::sdk::GameServer_Status::MergeFrom(from._internal_status());
  }
}

void GameServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carrier.dev.sdk.GameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServer::CopyFrom(const GameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carrier.dev.sdk.GameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServer::IsInitialized() const {
  return true;
}

void GameServer::InternalSwap(GameServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServer, status_)
      + sizeof(GameServer::status_)
      - PROTOBUF_FIELD_OFFSET(GameServer, object_meta_)>(
          reinterpret_cast<char*>(&object_meta_),
          reinterpret_cast<char*>(&other->object_meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServer::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sdk
}  // namespace dev
}  // namespace carrier
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::carrier::dev::sdk::Empty* Arena::CreateMaybeMessage< ::carrier::dev::sdk::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::carrier::dev::sdk::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::carrier::dev::sdk::BoolValue* Arena::CreateMaybeMessage< ::carrier::dev::sdk::BoolValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::carrier::dev::sdk::BoolValue >(arena);
}
template<> PROTOBUF_NOINLINE ::carrier::dev::sdk::KeyValue* Arena::CreateMaybeMessage< ::carrier::dev::sdk::KeyValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::carrier::dev::sdk::KeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::carrier::dev::sdk::Duration* Arena::CreateMaybeMessage< ::carrier::dev::sdk::Duration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::carrier::dev::sdk::Duration >(arena);
}
template<> PROTOBUF_NOINLINE ::carrier::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse* Arena::CreateMaybeMessage< ::carrier::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::carrier::dev::sdk::GameServer_ObjectMeta_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::carrier::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::carrier::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::carrier::dev::sdk::GameServer_ObjectMeta_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::carrier::dev::sdk::GameServer_ObjectMeta* Arena::CreateMaybeMessage< ::carrier::dev::sdk::GameServer_ObjectMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::carrier::dev::sdk::GameServer_ObjectMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::carrier::dev::sdk::GameServer_Spec_Constraint* Arena::CreateMaybeMessage< ::carrier::dev::sdk::GameServer_Spec_Constraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::carrier::dev::sdk::GameServer_Spec_Constraint >(arena);
}
template<> PROTOBUF_NOINLINE ::carrier::dev::sdk::GameServer_Spec* Arena::CreateMaybeMessage< ::carrier::dev::sdk::GameServer_Spec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::carrier::dev::sdk::GameServer_Spec >(arena);
}
template<> PROTOBUF_NOINLINE ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange* Arena::CreateMaybeMessage< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort_PortRange >(arena);
}
template<> PROTOBUF_NOINLINE ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort* Arena::CreateMaybeMessage< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress_LoadBalancerPort >(arena);
}
template<> PROTOBUF_NOINLINE ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress* Arena::CreateMaybeMessage< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus_LoadBalancerIngress >(arena);
}
template<> PROTOBUF_NOINLINE ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus* Arena::CreateMaybeMessage< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::carrier::dev::sdk::GameServer_Status_LoadBalancerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::carrier::dev::sdk::GameServer_Status_GameServerCondition* Arena::CreateMaybeMessage< ::carrier::dev::sdk::GameServer_Status_GameServerCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::carrier::dev::sdk::GameServer_Status_GameServerCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::carrier::dev::sdk::GameServer_Status* Arena::CreateMaybeMessage< ::carrier::dev::sdk::GameServer_Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::carrier::dev::sdk::GameServer_Status >(arena);
}
template<> PROTOBUF_NOINLINE ::carrier::dev::sdk::GameServer* Arena::CreateMaybeMessage< ::carrier::dev::sdk::GameServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::carrier::dev::sdk::GameServer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
